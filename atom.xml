<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴蔚</title>
  
  <subtitle>生命不息，折腾不止！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wuweiblog.com/"/>
  <updated>2021-07-27T04:54:22.627Z</updated>
  <id>http://www.wuweiblog.com/</id>
  
  <author>
    <name>John Doe Thanks the author of the theme</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>社会与资本</title>
    <link href="http://www.wuweiblog.com/2021/01/31/%E7%A4%BE%E4%BC%9A%E4%B8%8E%E8%B5%84%E6%9C%AC/"/>
    <id>http://www.wuweiblog.com/2021/01/31/社会与资本/</id>
    <published>2021-01-31T03:03:15.000Z</published>
    <updated>2021-07-27T04:54:22.627Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近看完了《宣言》，有一点小小的体会，本来最近回院里之后做了很多事情，也掌握了不少新的知识和技能，在这里应该做一个总结的，但是想想这些知识也好，技能也罢不过都是细枝末节的东西，可能对我工作会有些帮助，但是对生活，或者说对认知的提升并没有太大的意义，但是看完了《宣言》以前有些不太明白，不太清楚的地方好像有点清楚了，或者说提供给了一个思考的方向，全文不是很长，每天在上下班的公交上看也就花了一周不到的时间看完了。</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;至今一切社会的历史都是阶级斗争的历史。自由民和奴隶、贵族和平民、领主和农奴、行会师傅和帮工，一句话，压迫者和被压迫者，始终处于相互对立的地位，进行不断的、有时隐蔽有时公开的斗争，而每一次斗争的结局是整个社会受到革命改造或者斗争的各阶级同归于尽。<br>&nbsp;&nbsp;&nbsp;&nbsp;在过去的各个历史时代，我们几乎到处都可以看到社会完全划分为各个不同的等级，看到社会地位分成的多种多样的层次。在古罗马，有贵族、骑士、平民、奴隶，在中世纪，有封建主、臣仆、行会师傅、帮工、农奴，而且&nbsp;&nbsp;&nbsp;&nbsp;几乎在每一个阶级内部又有一些特殊的阶层。从封建社会的灭亡中产生出来的现代资产阶级社会并没有消灭阶级对立。它只是用新的阶级、新的压迫条件、新的斗争形式代替了旧的。<br>&nbsp;&nbsp;&nbsp;&nbsp;但是，我们的时代，资产阶级时代，却有一个特点：它使阶级对立简单化了。整个社会日益分裂为两大敌对的阵营，分裂为两大相互直接对立的阶级：资产阶级和无产阶级。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;所以其实我们社会发展的进程也就是不断的阶级斗争的进程，不断的从特权到反对特权的过程，资产阶级取代封建社会的过程并没有消灭阶级，消除剥削，而是将阶级斗争简单的分为资产阶级和无产阶级，这个取代过程有着其先进意义：</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;资产阶级抹去了一切向来受人尊崇和令人敬畏的职业的神圣光环。它把医生、律师、教士、诗人和学者变成了它出钱招雇的雇佣劳动者。<br>&nbsp;&nbsp;&nbsp;&nbsp;资产阶级撕下了罩在家庭关系上的温情脉脉的面纱，把这种关系变成了纯粹的金钱关系。资产阶级揭示了，在中世纪深受反动派称许的那种人力的野蛮使用，是以极端怠惰作为相应补充的。它第一个证明了，人的活动能够取得什么样的成就。它创造了完全不同于埃及金字塔、罗马水道和哥特式教堂的奇迹；它完成了完全不同于民族大迁徙和十字军东征的远征。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;资产阶级取代封建阶级，通过赤裸裸的雇佣关系让人们对于劳动力、资本、市场等有着更深入的理解，同时由于资本的逐利性，在资本主义的初级阶段，它会促进市场的发展，技术的进步，提高劳动生产效率，当然这一切都是建立在对无产阶级压迫的基础之上的，所以随着资本主义的发展，资本、市场、劳动力在全球尺度上进行分配与分工，极大的降低了生产成本，提高了生产效率。<br>&nbsp;&nbsp;&nbsp;&nbsp;然而我们在讨论资本主义的时候是站在资本家的视角，正如《宣言》中所说，资本主义是短视的，随着其发展，同时也壮大了资本主义的掘墓人——“无产阶级”。现当代随着资本主义的发展慢慢诞生出了一批所谓的中产，实际上不过是资产阶级在无产阶级内部划分出的阶层来用户分化和迷惑无产阶级的武器，判断是否为资产阶级的标准只有一条，是否存在剥削，而所谓的中产不过是从资本家手中获得稍微多一些的薪资而已。</p><blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;在无产阶级的生活条件中，旧社会的生活条件已经被消灭了。无产者是没有财产的；他们和妻子儿女的关系同资产阶级的家庭关系再没有任何共同之处了；现代的工业劳动，现代的资本压迫，无论在英国或法国，无论在美国或德国，都是一样的，都使无产者失去了任何民族性。法律、道德、宗教，在他们看来全都是资产阶级偏见，隐藏在这些偏见后面的全都是资产阶级利益。</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;所以资本家是没有民族性、法律、道德、宗教的，他们所做的一切只是为了利润，而个体或者说人，作为存在的意义在于创造价值或者说利润，而这就是资本对于人的异化，将人与土地、厂房、机械设备等等同，有所不同的是人力资源更需要合理的管理以创造最大的价值。所以我们有了996甚至007，有富士康十三跳，也有平多多23岁猝死的程序员，但是这些在资本眼中并不算什么，就类似机器的老化和零件的替换而已，到此为止，后续不宜多谈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近看完了《宣言》，有一点小小的体会，本来最近回院里之后做了很多事情，也掌握了不少新的知识和技能，在这里应该做一个总结的，但是想想这些知识也好，技能也罢不过都是细枝末节的东西，可能对我工作会有些帮助，但是对生活，或者说对认知的
      
    
    </summary>
    
      <category term="书评" scheme="http://www.wuweiblog.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
      <category term="共产党宣言" scheme="http://www.wuweiblog.com/tags/%E5%85%B1%E4%BA%A7%E5%85%9A%E5%AE%A3%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>有那么一瞬间</title>
    <link href="http://www.wuweiblog.com/2020/12/25/%E6%9C%89%E9%82%A3%E4%B9%88%E4%B8%80%E7%9E%AC%E9%97%B4/"/>
    <id>http://www.wuweiblog.com/2020/12/25/有那么一瞬间/</id>
    <published>2020-12-25T08:37:23.000Z</published>
    <updated>2021-01-31T03:01:03.851Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;本来今天组织登山，结束之后大家都准备去密室逃脱，感觉自己没有啥兴趣所以最后也没有去，在回来的路上突然想起一串号码546XXXXXXXXXXXX，然后脑子里面越来越清楚，不知道为啥这组号码会记得这么清楚，不过既然记得总归是有一些原因的吧，所以我尝试搜索了一下，最后搜到了一个QQ号，我恍然大悟，原来是…<br>&nbsp;&nbsp;&nbsp;&nbsp;我应该是一个记性不太好的人，很多很多事情我都会忘记，我会忘记的很快很快，但是我的脑子好像故意在跟我开玩笑，总是会有一些奇奇怪怪的记忆会突然冒出来，然后特别清晰、特别清晰，然后彻底忘记掉，也许这就是我的脑子在提醒我说这件事情，这个号码，这个瞬间一直在脑子里存放着，很久很久没有碰过了，是不是要把它给彻底删除掉吧。以前遇到这样的事情发生后我总是一笑而过，不过就是一些小事而已，突然想起来又怎么样，今天不知道为什么突然又些难过，没错是有点难过，情绪上的难过，为了缓解尴尬我带上耳机听起了”谐星聊天会”，听着他们在节目中各种扯淡，这样难过的情绪才渐渐减弱。所以在回来的公交上我会想，难道是我老了所以才会这么多愁善感，可是说自己老吧又不至于，我特么其实才三十不到，二十八岁而已哪里称得上老呢，但是为什么总是喜欢对着一些莫名其妙的事情有着怀念，真是奇怪。<br>&nbsp;&nbsp;&nbsp;&nbsp;前一段时间跟老甘同志聊了很多，我觉得我们在生活上可能都不是多么聪明的人，说来说去变成了”夸奖自己”聊天会，然后感慨为啥我们这么”优秀”的人生活会这么艰难。不过不得不说可能我们在生活上确实不是多么聪明的人。我总是无法面对选择，或者说无法果断的面对生活和情感的选择，大多数情况下我会选择当一只鸵鸟把头埋在沙子里面，如果有人把沙子挖开一点我就会再向下埋一点，直到我发现不管我怎么躲都躲不掉了，我就会像红了眼的赌徒一样把所有的底线和筹码一把梭了，我知道这样不好，可是我似乎没有什么太好的办法去面对这些问题，再这么发散下去可能话题会变成有突然出现在我脑子中的QQ号码引发的血案了，所以还是把话题往回收一下。<br>&nbsp;&nbsp;&nbsp;&nbsp;我还是回到这个瞬间上来说吧，说到这里又不得不提朱砂痣和白月光的问题，有的作品能够传世真的是因为那些对情感、人性、生活细致到让人惊恐的观察和经历。我想不管是男性还是女性都会或者曾经纠结于这个问题，也有人会用蚊子血和白米饭告诉大家我们应该珍惜当下。其实我是觉得应该珍惜当下，不应该有朱砂痣和白月光的问题，但是我们的记忆，我们的神经系统它比较有意思，我们所经历过了一切都会在这里留下痕迹，当然随着时间的流逝那些痕迹会慢慢变淡，变得我们甚至用心去想却回忆不起来，但是总是没有办法消失。所以我们有那么一瞬间，看见落日会想起学校门口卡车扬起的灰尘，看见风筝会想起深夜的华灯，看见公交想起了以为早就忘记的号码。<br>&nbsp;&nbsp;&nbsp;&nbsp;人嘛，就是这么奇怪，也没有什么逻辑，可是记忆就这么出现了，也是猝不及防，不过这些也都不是什么大事，或者说生活应该就是一个特别高明的喜剧大师，让人用最诙谐的方式经历了最悲伤的故事，所以我们还是应该开行不是么，毕竟我们好像演的是一出喜剧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本来今天组织登山，结束之后大家都准备去密室逃脱，感觉自己没有啥兴趣所以最后也没有去，在回来的路上突然想起一串号码546XXXXXXXXXXXX，然后脑子里面越来越清楚，不知道为啥这组号码会记得这么清楚，不过既然记得总归是有一些
      
    
    </summary>
    
      <category term="随感" scheme="http://www.wuweiblog.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>死亡记录</title>
    <link href="http://www.wuweiblog.com/2020/12/06/%E6%AD%BB%E4%BA%A1%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.wuweiblog.com/2020/12/06/死亡记录/</id>
    <published>2020-12-06T14:56:50.000Z</published>
    <updated>2020-12-25T08:47:02.704Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;本来特别不想取这个题目，像我这么年轻的人其实不应该谈论死亡这个话题，但是实际上到目前为止总觉得死亡距离自己并不是太遥远了，为了表达对于死亡的尊重，以后每一个身边亲近的人去世我都会在这里写一篇关于死亡的记录，同时记录自己对于死亡的看法。<br>&nbsp;&nbsp;&nbsp;&nbsp;其实作为动物的我们，一直以来都面临着死亡的威胁，也一定会或多或少的思考关于死亡的问题，随着我们年纪渐长，我们的亲人，朋友会相继离去，总有一天我们自己也会死去，以前的时候我并不害怕死亡，曾经我一个人住，每当夜幕降临我总是喜欢坐在沙发上思考关于生存和死亡的问题，广州的天气并不冷，所以即使到了深秋时节也适合坐在沙发上发呆，我想人来到这个世界上，我出生了，有些人感到快乐；我死去了，有些人感到难过。然后时间会冲淡一切，我们在这个世界上的痕迹会被时间掩盖，直至消失。<br>&nbsp;&nbsp;&nbsp;&nbsp;早几年前大姑父去世了，不久之后大姑妈也去世了，今年外婆和小姑父相继去世，感觉今年见证了太多的离别，最近知道本科舍友的离去，那些我们熟悉的人会渐渐离开，长辈的离开或许我们还能够理解，而本科舍友的离开让我有些慌乱，或者说有些丧气，去年我们还在网上聊过，一年不见，就这么悄无声息的走了，走的有点突然，有点让人难以理解。不过其实死亡来临的时候其实就是这样，我们没有太多准备的时间，我们只能收拾好自己的心情迎接死亡的到来。妈妈笃信宗教，不得不说这真是一件让人羡慕的事情，对于她来说也许死亡也还算一件不错的事情吧，但是感觉好像家里不太赞成我太早去见上帝，这也比较奇怪了，只能说也许他们不是真的相信死亡之后会上天堂吧，其实我也不相信。我认为死亡就是终结，我们人生所有一切的终结，我们所取得的名利财富，我们所得到的成就，一切的一切都到此为止了。也许有人会怀念我们，也许有人会唾骂我们，但是这一切已经跟我们没有关系了。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以在我们漫长或者短暂的人生中我们应该怎么样，延迟满足然后充满希望的走向死亡，不过这多少会带着一些遗憾和不甘吧；又或者及时满足，然后毫无遗憾的死亡，这样是不是好像显得太没有信念了，科学的发展似乎并没有能解决我们所面临到的终极问题，如果有选择，多少人会选择活下去又多少人会选择死亡呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本来特别不想取这个题目，像我这么年轻的人其实不应该谈论死亡这个话题，但是实际上到目前为止总觉得死亡距离自己并不是太遥远了，为了表达对于死亡的尊重，以后每一个身边亲近的人去世我都会在这里写一篇关于死亡的记录，同时记录自己对于死亡
      
    
    </summary>
    
    
      <category term="随感，死亡" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F%EF%BC%8C%E6%AD%BB%E4%BA%A1/"/>
    
  </entry>
  
  <entry>
    <title>不读书(九)</title>
    <link href="http://www.wuweiblog.com/2020/12/06/%E4%B8%8D%E8%AF%BB%E4%B9%A6-%E4%B9%9D/"/>
    <id>http://www.wuweiblog.com/2020/12/06/不读书-九/</id>
    <published>2020-12-06T13:21:04.000Z</published>
    <updated>2021-07-27T05:04:51.275Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;终于看完了这本书，这本书看的跨度太长，导致其实有些剧情记得不是太清楚了，不过毕竟是一本小说，剧情差不多能串起来就行，当然期间发生了很多事情，这真是一件值得庆祝的事情，人生不同阶段对于事情的看法和体会大不相同，不过在人一生之中总会又一些东西沉淀下来，好的、坏的，所有这些构成了我们的人生观。以前学地质学的时候观察岩石和地层构造，千百万年前的植物、动物、气温、湿度，都体现在那不算特别厚的岩层中，经过地质作用，经过挤压让他们紧紧的结合在一起，构成了土壤，构成了岩石，构成了我们的地层。其实这也就是如同我们的人生，人生不同阶段我们可以有不同的认知和理解，但是不可否认，构成我们认知的基础是那些在我们几十年人生中所经历的喜怒哀乐，折磨与痛苦、兴奋与狂喜经过岁月的压缩都会构成我们人生认识中薄薄的一层，似乎没有啥作用可是我们的人生也无法构建于空中。<br>&nbsp;&nbsp;&nbsp;&nbsp;前面说了半天没有提到书，书的剧情大概说一下，一个以冰球为中心的小镇，叫熊镇，随着经济的萧条熊镇越来越没落，他们唯一的希望就是冰球，如果他们镇的年轻人能够在冰球联赛中获得冠军，那么他们就会得到所有人的关注，他们会有自己的冰球中心，会获得更多的投资，小镇也会恢复曾经的繁荣。可是一切的一切都因为一件事给毁了，在决赛前赛队的明星球员（也是最大赞助商的儿子）涉嫌强奸球队主教练女儿，一场涉及信任与良知的故事就此展开。<br>&nbsp;&nbsp;&nbsp;&nbsp;说起来是一个简单的故事，但是其实当我们面临选择的时候似乎不是那么容易，我们每个人有着不同的经历，我们已经不是少年，有谁能说有勇气直面人生呢，或者真相到底是什么到底重要么？所有人都面临着选择，你是背叛环境或者是背叛内心？我们是背叛生活还是背叛良知？其实我想起一句话叫”虽千万人，吾往矣”，我是一个脑补能力很强的人，若是千军万马在前，我想我能不躺下就已经算坚强了，应该没有”吾往矣”的勇气。其实我觉得教育是一个很有意思的事情，虽然我一直不太看得起社会科学，不过不得不提，纯粹的理科生真的就是工具，知识带给我们的不是力量而是计算。就像AlphaGO一样，冰冷的计算，然后做出最佳的选择，没有热血，没有良知。前一段时间闹的沸沸扬扬的清北学生回国比例的问题，其实我觉得也没有必要苛责，我们之中最聪明的那批人已经把心给丢了，他们太了解这个社会，一个太清醒的人如果失去了初心，一味的迎合着这个社会那这样的现象势必就会发生，所以与其苛责他们，不如反思我们的教育吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;现在自制力越来越差，读书也越来越慢，越来越容易分神，我想可能是有点累，有时候特别话唠，然后憋着憋着就憋回去了，了解过一个词叫习得性无助，其实我们面对这个世界也容易出现习得性无助，表现形式不同罢了，最后回到这本书，名头比较大，套路普通，并不值得花太多时间去看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;终于看完了这本书，这本书看的跨度太长，导致其实有些剧情记得不是太清楚了，不过毕竟是一本小说，剧情差不多能串起来就行，当然期间发生了很多事情，这真是一件值得庆祝的事情，人生不同阶段对于事情的看法和体会大不相同，不过在人一生之中总
      
    
    </summary>
    
      <category term="书评" scheme="http://www.wuweiblog.com/categories/%E4%B9%A6%E8%AF%84/"/>
    
    
      <category term="熊镇,书评" scheme="http://www.wuweiblog.com/tags/%E7%86%8A%E9%95%87-%E4%B9%A6%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>挣扎</title>
    <link href="http://www.wuweiblog.com/2020/11/16/%E6%8C%A3%E6%89%8E/"/>
    <id>http://www.wuweiblog.com/2020/11/16/挣扎/</id>
    <published>2020-11-16T10:32:17.000Z</published>
    <updated>2020-12-06T13:19:36.709Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;最近还是做了不少技术的研究本来是准备写一个技术向的帖子，但是想来想去还是拟了这一个题目，这两周好像过的其实都不怎么好，总是想特别多的事情，关于未来，关于理想，关于生活，不得不承认，实际上还是有一些压力，有时候也在想，这些压力都体现在什么地方，到底应该怎么做才能够缓解一些，想了很久也想了很多，也一直跟朋友们聊天，感觉朋友们其实也都差不多，似乎也好不了多少，以前的时候就一直在思考，人的一生也就短短七八十年，长不过九十年，除去前十几年与后二十年，于我们而言真正称得上人生的日子实际上也就不到五十年，在其中还要除去一半的休息时间，除去因病卧床，我们所拥有的人生也就二十年不到，在这二十年不到的日子中我们需要完成好工作，我们需要追逐梦想，我们需要好好与家人相处，我如果感叹时光流逝似乎是很正确的。<br>&nbsp;&nbsp;&nbsp;&nbsp;因为时间不够所以我们总是需要将我们的精力分为N份，有的人分成了前后N个部分，有的人将每日的时间分成了N个部分，不知道何种选择才是正确，又或者说其实不管怎么选都不不会是正确，因为我们注定就要后悔不是么。那问题就来了，既然我们注定要后悔我们何不不做选择，就这样随波逐流，得过且过呢？emmm，所以我们有了”人生得意须尽欢，莫使金樽空对月”的放荡，所以希腊也出现了”伊壁鸠鲁主义”以前我也在思考，虽然说我们需要拒绝短暂的快乐以获得长期的快乐，但是如果我们一直能够获得短暂的快乐到死亡，而那些想要获得长期快乐的人到死也都没有获得应该那应该如何才好？这两种人生到底哪一种更幸福？<br>&nbsp;&nbsp;&nbsp;&nbsp;我们当然本能的觉得我如果能一直满足我当前的需求这当然呢是最快乐的，但是经过仔细的思考之后我发现并不是这样。实际上如果我们以伊壁鸠鲁主义过完自己的一生也并不见得能够获取更大的快乐，我们短期欲望的满足一般来说是满足本我的需求，也就是我们身为自然生物生存本能的需求，从弗洛伊德看来我们所面对的自我应该是本我与超我的结合，我们过于注重本我需求的满足而忽略了超我的需求。到底超我的需求是什么？这似乎很难说的清楚，我也不是研究人员所以也无法说的清楚，不过我总是会有自己一些看法。我觉得超我的需求在于希望，希望是永不满足，或者是满足了就应该死亡了，这恐怕是对于人最后的价值。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以我们总是在本我与超我的矛盾中挣扎，我们需要满足本我的欲望否则我们会感到沮丧，我们又不能完全满足本我的欲望，否则我们会失去希望，所以我们在这两种角色之中不停的转换，我们需要以希望来抑制本我的需求来让我们超我的需求得到满足，但是本我的需求永远也不可能被完全压制，所以我们总是间歇性踌躇满志，持续性混吃等死。所以这样才构成了一个矛盾的自我，所以其实我们本身就是一个矛盾的聚合体，那如何才能过的不那么挣扎，有大毅力的人能够持续压制本我需求以期达到超我的最大满足，有大智慧的人能够接受本我的需求以期达到本我的最大幸福。而我们普通人呢？我们只能不停取舍，不停权衡，在这权衡和取舍之间就这么过完了自己一生。<br>&nbsp;&nbsp;&nbsp;&nbsp;这听起来似乎有点绝望，不过本来生活就是一个走向绝望的过程，或者说是王小波口中受锤的过程，我们渐渐学会了接受自己的无能为力，我们渐渐能够接受一切，那些该接受的，不该接受的，然后渐渐失去希望，不再挣扎。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近还是做了不少技术的研究本来是准备写一个技术向的帖子，但是想来想去还是拟了这一个题目，这两周好像过的其实都不怎么好，总是想特别多的事情，关于未来，关于理想，关于生活，不得不承认，实际上还是有一些压力，有时候也在想，这些压力都
      
    
    </summary>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>点到三维空间直线距离计算以向量方式计算</title>
    <link href="http://www.wuweiblog.com/2020/11/02/%E7%82%B9%E5%88%B0%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E7%9B%B4%E7%BA%BF%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97%E4%BB%A5%E5%90%91%E9%87%8F%E6%96%B9%E5%BC%8F%E8%AE%A1%E7%AE%97/"/>
    <id>http://www.wuweiblog.com/2020/11/02/点到三维空间直线距离计算以向量方式计算/</id>
    <published>2020-11-02T03:43:00.000Z</published>
    <updated>2020-11-09T09:32:19.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="点到直线距离的向量计算方法："><a href="#点到直线距离的向量计算方法：" class="headerlink" title="点到直线距离的向量计算方法："></a>点到直线距离的向量计算方法：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;这篇文章没有什么特别的，主要就是针对最近的一些想法进行了尝试，其中需要用到相关的数学知识，在这里进行一下总结避免忘记，实际上点到直线的距离计算在GIS应用中十分广泛，在做线缓冲区分析，面缓冲区分析等应用中都会涉及，在这里我的应用类似于对空间三维直线进行缓冲区分析，获取缓冲区内的点云，针对这个应用首要的就是计算点到空间三维直线的距离，点到平面直线距离公式比较简单，在这里就不多做描述，然而相比于2维直线，三维直线在空间中的描述是通过两个平面相交来实现的，因此距离公式就不是这么明确了，一般来说是通过向量来进行计算。  </p><div align="center"><br><br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/%E7%82%B9%E5%88%B0%E7%9B%B4%E7%BA%BF%E8%B7%9D%E7%A6%BB.png" alt="点到直线距离"><br></div>  <p>&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，点A和点B为空间直线上两点，C点为直线外一点，点到直线的距离为d，假设垂足为O，则AO为直线外一点C到直线AB的投影长度，假设有向量$\overrightarrow{AC}$ 以及向量$\overrightarrow{AB}$，则AO为向量$\overrightarrow{AC}$到$\overrightarrow{AB}$上的的投影，则计算公式为:<br>$$<br>|AO|=|\overrightarrow{AC}|cos(\theta)<br>$$<br>&nbsp;&nbsp;&nbsp;&nbsp;则点到直线的距离为：<br>$$\begin{aligned}<br>|CO| &amp;=\sqrt{|AC|^{2}-|AO|^{2}} \<br>     &amp;=\sqrt{|AC|^{2}(1-cos^{2}(\theta))}\<br>     &amp;=|AC|*\sqrt{1-(\frac{\overrightarrow{AB}\cdot\overrightarrow{AC}}{|\overrightarrow{AB}||\overrightarrow{AC}|})}<br>\end{aligned}$$<br>&nbsp;&nbsp;&nbsp;&nbsp;根据以上公式可以求取点到直线的距离，以下为代码实现：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> DistanceComputation::Distance(Point3D pt, Point3D pl1, Point3D pl2,<span class="keyword">bool</span> segment<span class="comment">/*=true*/</span>)</span><br><span class="line">&#123;</span><br><span class="line">    Point3D ac,ab;</span><br><span class="line">    ac.x=pt.x-pl1.x; ac.y=pt.y-pl1.y; ac.z=pt.z-pl1.z;</span><br><span class="line">    ab.x=pl2.x-pl1.x;ab.y=pl2.y-pl1.y;ab.z=pl2.z-pl1.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> acDotab = ac.x*ab.x+ac.y*ab.y+ac.z*ab.z;</span><br><span class="line">    <span class="keyword">double</span> dis2_ac = ac.x*ac.x+ac.y*ac.y+ac.z*ac.z;</span><br><span class="line">    <span class="keyword">double</span> dis2_ab = ab.x*ab.x+ab.y*ab.y+ab.z*ab.z;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d12 = dis2_ac;</span><br><span class="line">    <span class="keyword">double</span> d22 = acDotab*acDotab/dis2_ab;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//if compute the segment</span></span><br><span class="line">    <span class="keyword">if</span>(segment)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(acDotab/<span class="built_in">sqrt</span>(dis2_ac)/<span class="built_in">sqrt</span>(dis2_ab)&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Distance(pt,pl1);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(acDotab/<span class="built_in">sqrt</span>(dis2_ab)&gt;<span class="built_in">sqrt</span>(dis2_ab))&#123;</span><br><span class="line">            <span class="keyword">return</span> Distance(pt,pl2);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">sqrt</span>(d12-d22);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>(d12-d22);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="点到线段的距离计算"><a href="#点到线段的距离计算" class="headerlink" title="点到线段的距离计算"></a>点到线段的距离计算</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;实际上在计算过程中由于直线无限长，因此在计算过程中会计算到点到直线的距离这样与实际结果不相符，一般来说我们需要计算的是点到线段的距离，因此需要有一个线段约束。根据上图所示，如果点C在点线段AB之间，则∠CAB小于90°，若点C在点A之外则∠CAB大于90°，因此当∠CAB大于90°则点到直线的最近距离为点C到点A的距离。此外，当AC在AB上的投影距离大于线段AC的长度则说明点C在B点之外，则点C到线段的最近距离为点C到点B的距离，添加一个判断则能够计算点到线段的距离。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;点到直线距离的向量计算方法：&quot;&gt;&lt;a href=&quot;#点到直线距离的向量计算方法：&quot; class=&quot;headerlink&quot; title=&quot;点到直线距离的向量计算方法：&quot;&gt;&lt;/a&gt;点到直线距离的向量计算方法：&lt;/h2&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbs
      
    
    </summary>
    
      <category term="数学" scheme="http://www.wuweiblog.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数学" scheme="http://www.wuweiblog.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>ArcGIS 结合 WebGL动态渲染1</title>
    <link href="http://www.wuweiblog.com/2020/10/30/ArcGIS-%E7%BB%93%E5%90%88-WebGL%E5%8A%A8%E6%80%81%E6%B8%B2%E6%9F%931/"/>
    <id>http://www.wuweiblog.com/2020/10/30/ArcGIS-结合-WebGL动态渲染1/</id>
    <published>2020-10-30T03:51:33.000Z</published>
    <updated>2020-11-02T03:41:57.813Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;目前GIS应用过程中，对于渲染效果的要求越来越高最好能够采用一些动画来实现渲染效果的优化，而在ArcGIS js API中直接通过FeatureLayer只能够渲染一些简单的图标，难以完成动画效果的展示，为了能够展示比较好的渲染效果，我对官网DEMO进行了仔细研究，发现实际上如果能够与WebGL进行深入结合并进行定制化的开发，采用ArcGIS js API也能够有很好的效果，<a href="https://developers.arcgis.com/javascript/latest/sample-code/?search=WebGL" target="_blank" rel="noopener">具体官网链接参考</a>，本次我们介绍在MapView下结合WebGL的渲染方式，主要效果展示为：  </p><ol><li>ArcGIS 点强调动态效果展示：<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/arcgis%E7%82%B9%E5%BC%BA%E8%B0%83.gif" alt="ArcGIS WebGL 点强调展示"></li><li>ArcGIS WebGL 线流动态效果展示：<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/arcgis%E7%BA%BF%E6%B5%81%E5%9B%BE.gif" alt="ArcGIS WebGL 线流展示">  </li></ol><p>上面两幅图为展示的动态效果，下面我们针对动态展示效果的代码进行分析：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>([</span><br><span class="line"><span class="string">"esri/Map"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"esri/core/watchUtils"</span>,</span><br><span class="line"><span class="string">"esri/core/promiseUtils"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"esri/geometry/support/webMercatorUtils"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"esri/layers/GraphicsLayer"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"esri/views/MapView"</span>,</span><br><span class="line"></span><br><span class="line"><span class="string">"esri/views/2d/layers/BaseLayerViewGL2D"</span></span><br><span class="line">], <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">Map,</span></span></span><br><span class="line"><span class="function"><span class="params">watchUtils,</span></span></span><br><span class="line"><span class="function"><span class="params">promiseUtils,</span></span></span><br><span class="line"><span class="function"><span class="params">webMercatorUtils,</span></span></span><br><span class="line"><span class="function"><span class="params">GraphicsLayer,</span></span></span><br><span class="line"><span class="function"><span class="params">MapView,</span></span></span><br><span class="line"><span class="function"><span class="params">BaseLayerViewGL2D</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// Subclass the custom layer view from BaseLayerViewGL2D.</span></span><br><span class="line"><span class="keyword">var</span> CustomLayerView2D = BaseLayerViewGL2D.createSubclass(&#123;</span><br><span class="line">    <span class="comment">// Locations of the two vertex attributes that we use. They</span></span><br><span class="line">    <span class="comment">// will be bound to the shader program before linking.</span></span><br><span class="line">    aPosition: <span class="number">0</span>,</span><br><span class="line">    aOffset: <span class="number">1</span>,</span><br><span class="line">    aColor:<span class="number">2</span>,</span><br><span class="line">    <span class="keyword">constructor</span>: function () &#123;</span><br><span class="line">    <span class="comment">// Geometrical transformations that must be recomputed</span></span><br><span class="line">    <span class="comment">// from scratch at every frame.</span></span><br><span class="line">    <span class="keyword">this</span>.transform = mat3.create();</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter = vec2.create();</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation = vec2.create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Geometrical transformations whose only a few elements</span></span><br><span class="line">    <span class="comment">// must be updated per frame. Those elements are marked</span></span><br><span class="line">    <span class="comment">// with NaN.</span></span><br><span class="line">    <span class="keyword">this</span>.display = mat3.fromValues(<span class="literal">NaN</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NaN</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.screenScaling = vec3.fromValues(<span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Whether the vertex and index buffers need to be updated</span></span><br><span class="line">    <span class="comment">// due to a change in the layer data.</span></span><br><span class="line">    <span class="keyword">this</span>.needsUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We listen for changes to the graphics collection of the layer</span></span><br><span class="line">    <span class="comment">// and trigger the generation of new frames. A frame rendered while</span></span><br><span class="line">    <span class="comment">// `needsUpdate` is true may cause an update of the vertex and</span></span><br><span class="line">    <span class="comment">// index buffers.</span></span><br><span class="line">    <span class="keyword">var</span> requestUpdate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.needsUpdate = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.requestRender();</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.watcher = watchUtils.on(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        <span class="string">"layer.graphics"</span>,</span><br><span class="line">        <span class="string">"change"</span>,</span><br><span class="line">        requestUpdate,</span><br><span class="line">        requestUpdate,</span><br><span class="line">        requestUpdate</span><br><span class="line">    );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called once a custom layer is added to the map.layers collection and this layer view is instantiated.</span></span><br><span class="line">    attach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define and compile shaders.</span></span><br><span class="line">    <span class="keyword">var</span> vertexSource =</span><br><span class="line">        <span class="string">"precision highp float;"</span> +</span><br><span class="line">        <span class="string">"uniform mat3 u_transform;"</span> +</span><br><span class="line">        <span class="string">"uniform mat3 u_display;"</span> +</span><br><span class="line">        <span class="string">"attribute vec2 a_position;"</span> +</span><br><span class="line">        <span class="string">"attribute vec2 a_offset;"</span> +</span><br><span class="line">        <span class="string">"attribute vec3 a_color;"</span> +</span><br><span class="line">        <span class="string">"varying vec2 v_offset;"</span> +</span><br><span class="line">        <span class="string">"varying vec3 v_color;"</span> +</span><br><span class="line">        <span class="string">"const float SIZE = 70.0;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"    gl_Position.xy = (u_display * (u_transform * vec3(a_position, 1.0) + vec3(a_offset * SIZE, 0.0))).xy;"</span> +</span><br><span class="line">        <span class="string">"    gl_Position.zw = vec2(0.0, 1.0);"</span> +</span><br><span class="line">        <span class="string">"    v_offset = a_offset;"</span> +</span><br><span class="line">        <span class="string">"    v_color = a_color;"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fragmentSource =</span><br><span class="line">        <span class="string">"precision highp float;"</span> +</span><br><span class="line">        <span class="string">"uniform float u_current_time;"</span> +</span><br><span class="line">        <span class="string">"varying vec2 v_offset;"</span> +</span><br><span class="line">        <span class="string">"varying vec3 v_color;"</span> +</span><br><span class="line">        <span class="string">"const float PI = 3.14159;"</span> +</span><br><span class="line">        <span class="string">"const float N_RINGS = 3.0;"</span> +</span><br><span class="line">        <span class="string">"const vec3 COLOR = vec3(0.23, 0.43, 0.70);"</span> +</span><br><span class="line">        <span class="string">"const float FREQ = 1.0;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"    float l = length(v_offset);"</span> +</span><br><span class="line">        <span class="string">"    float intensity = clamp(cos(l * PI), 0.0, 1.0) * clamp(cos(2.0 * PI * (l * 2.0 * N_RINGS - FREQ * u_current_time)), 0.0, 1.0);"</span> +</span><br><span class="line">        <span class="string">"    gl_FragColor = vec4(v_color * intensity, intensity);"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vertexShader = gl.createShader(gl.VERTEX_SHADER);</span><br><span class="line">    gl.shaderSource(vertexShader, vertexSource);</span><br><span class="line">    gl.compileShader(vertexShader);</span><br><span class="line">    <span class="keyword">var</span> fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);</span><br><span class="line">    gl.shaderSource(fragmentShader, fragmentSource);</span><br><span class="line">    gl.compileShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the shader program.</span></span><br><span class="line">    <span class="keyword">this</span>.program = gl.createProgram();</span><br><span class="line">    gl.attachShader(<span class="keyword">this</span>.program, vertexShader);</span><br><span class="line">    gl.attachShader(<span class="keyword">this</span>.program, fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bind attributes.</span></span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aPosition, <span class="string">"a_position"</span>);</span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aOffset, <span class="string">"a_offset"</span>);</span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aColor, <span class="string">"a_color"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Link.</span></span><br><span class="line">    gl.linkProgram(<span class="keyword">this</span>.program);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shader objects are not needed anymore.</span></span><br><span class="line">    gl.deleteShader(vertexShader);</span><br><span class="line">    gl.deleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retrieve uniform locations once and for all.</span></span><br><span class="line">    <span class="keyword">this</span>.uTransform = gl.getUniformLocation(</span><br><span class="line">        <span class="keyword">this</span>.program,</span><br><span class="line">        <span class="string">"u_transform"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.uDisplay = gl.getUniformLocation(<span class="keyword">this</span>.program, <span class="string">"u_display"</span>);</span><br><span class="line">    <span class="keyword">this</span>.uCurrentTime = gl.getUniformLocation(</span><br><span class="line">        <span class="keyword">this</span>.program,</span><br><span class="line">        <span class="string">"u_current_time"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the vertex and index buffer. They are initially empty. We need to track the</span></span><br><span class="line">    <span class="comment">// size of the index buffer because we use indexed drawing.</span></span><br><span class="line">    <span class="keyword">this</span>.vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">this</span>.indexBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of indices in the index buffer.</span></span><br><span class="line">    <span class="keyword">this</span>.indexBufferSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When certain conditions occur, we update the buffers and re-compute and re-encode</span></span><br><span class="line">    <span class="comment">// all the attributes. When buffer update occurs, we also take note of the current center</span></span><br><span class="line">    <span class="comment">// of the view state, and we reset a vector called `translationToCenter` to [0, 0], meaning that the</span></span><br><span class="line">    <span class="comment">// current center is the same as it was when the attributes were recomputed.</span></span><br><span class="line">    <span class="keyword">this</span>.centerAtLastUpdate = vec2.fromValues(</span><br><span class="line">        <span class="keyword">this</span>.view.state.center[<span class="number">0</span>],</span><br><span class="line">        <span class="keyword">this</span>.view.state.center[<span class="number">1</span>]</span><br><span class="line">    );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called once a custom layer is removed from the map.layers collection and this layer view is destroyed.</span></span><br><span class="line">    detach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Stop watching the `layer.graphics` collection.</span></span><br><span class="line">    <span class="keyword">this</span>.watcher.remove();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete buffers and programs.</span></span><br><span class="line">    gl.deleteBuffer(<span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.deleteBuffer(<span class="keyword">this</span>.indexBuffer);</span><br><span class="line">    gl.deleteProgram(<span class="keyword">this</span>.program);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called every time a frame is rendered.</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params">renderParameters</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = renderParameters.context;</span><br><span class="line">    <span class="keyword">var</span> state = renderParameters.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update vertex positions. This may trigger an update of</span></span><br><span class="line">    <span class="comment">// the vertex coordinates contained in the vertex buffer.</span></span><br><span class="line">    <span class="comment">// There are three kinds of updates:</span></span><br><span class="line">    <span class="comment">//  - Modification of the layer.graphics collection ==&gt; Buffer update</span></span><br><span class="line">    <span class="comment">//  - The view state becomes non-stationary ==&gt; Only view update, no buffer update</span></span><br><span class="line">    <span class="comment">//  - The view state becomes stationary ==&gt; Buffer update</span></span><br><span class="line">    <span class="keyword">this</span>.updatePositions(renderParameters);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is nothing to render we return.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.indexBufferSize === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update view `transform` matrix; it converts from map units to pixels.</span></span><br><span class="line">    mat3.identity(<span class="keyword">this</span>.transform);</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation[<span class="number">0</span>] = (state.pixelRatio * state.size[<span class="number">0</span>]) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation[<span class="number">1</span>] = (state.pixelRatio * state.size[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    mat3.translate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.screenTranslation</span><br><span class="line">    );</span><br><span class="line">    mat3.rotate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        (<span class="built_in">Math</span>.PI * state.rotation) / <span class="number">180</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.screenScaling[<span class="number">0</span>] = state.pixelRatio / state.resolution;</span><br><span class="line">    <span class="keyword">this</span>.screenScaling[<span class="number">1</span>] = -state.pixelRatio / state.resolution;</span><br><span class="line">    mat3.scale(<span class="keyword">this</span>.transform, <span class="keyword">this</span>.transform, <span class="keyword">this</span>.screenScaling);</span><br><span class="line">    mat3.translate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update view `display` matrix; it converts from pixels to normalized device coordinates.</span></span><br><span class="line">    <span class="keyword">this</span>.display[<span class="number">0</span>] = <span class="number">2</span> / (state.pixelRatio * state.size[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">this</span>.display[<span class="number">4</span>] = <span class="number">-2</span> / (state.pixelRatio * state.size[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Draw.</span></span><br><span class="line">    gl.useProgram(<span class="keyword">this</span>.program);</span><br><span class="line">    gl.uniformMatrix3fv(<span class="keyword">this</span>.uTransform, <span class="literal">false</span>, <span class="keyword">this</span>.transform);</span><br><span class="line">    gl.uniformMatrix3fv(<span class="keyword">this</span>.uDisplay, <span class="literal">false</span>, <span class="keyword">this</span>.display);</span><br><span class="line">    gl.uniform1f(<span class="keyword">this</span>.uCurrentTime, performance.now() / <span class="number">1000.0</span>);</span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>.indexBuffer);</span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aPosition);</span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aOffset);</span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aColor);</span><br><span class="line"></span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aPosition, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">28</span>, <span class="number">0</span>);</span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aOffset, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">28</span>, <span class="number">8</span>);</span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aColor,<span class="number">3</span>,gl.FLOAT,<span class="literal">false</span>,<span class="number">28</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    gl.enable(gl.BLEND);</span><br><span class="line">    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);</span><br><span class="line">    gl.drawElements(</span><br><span class="line">        gl.TRIANGLES,</span><br><span class="line">        <span class="keyword">this</span>.indexBufferSize,</span><br><span class="line">        gl.UNSIGNED_SHORT,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Request new render because markers are animated.</span></span><br><span class="line">    <span class="keyword">this</span>.requestRender();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called by the map view or the popup view when hit testing is required.</span></span><br><span class="line">    hitTest: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The map view.</span></span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">this</span>.view;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.layer.graphics.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Nothing to do.</span></span><br><span class="line">        <span class="keyword">return</span> promiseUtils.resolve(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute screen distance between each graphic and the test point.</span></span><br><span class="line">    <span class="keyword">var</span> distances = <span class="keyword">this</span>.layer.graphics.map(<span class="function"><span class="keyword">function</span> (<span class="params">graphic</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> graphicPoint = view.toScreen(graphic.geometry);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">        (graphicPoint.x - x) * (graphicPoint.x - x) +</span><br><span class="line">            (graphicPoint.y - y) * (graphicPoint.y - y)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the minimum distance.</span></span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    distances.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">distance, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (distance &lt; distances.getItemAt(minIndex)) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> minDistance = distances.getItemAt(minIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the minimum distance is more than 35 pixel then nothing was hit.</span></span><br><span class="line">    <span class="keyword">if</span> (minDistance &gt; <span class="number">35</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> promiseUtils.resolve(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise it is a hit; We set the layer as the source layer for the graphic</span></span><br><span class="line">    <span class="comment">// (required for the popup view to work) and we return a resolving promise to</span></span><br><span class="line">    <span class="comment">// the graphic.</span></span><br><span class="line">    <span class="keyword">var</span> graphic = <span class="keyword">this</span>.layer.graphics.getItemAt(minIndex);</span><br><span class="line">    graphic.sourceLayer = <span class="keyword">this</span>.layer;</span><br><span class="line">    <span class="keyword">return</span> promiseUtils.resolve(graphic);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called internally from render().</span></span><br><span class="line">    updatePositions: <span class="function"><span class="keyword">function</span> (<span class="params">renderParameters</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = renderParameters.context;</span><br><span class="line">    <span class="keyword">var</span> stationary = renderParameters.stationary;</span><br><span class="line">    <span class="keyword">var</span> state = renderParameters.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are not stationary we simply update the `translationToCenter` vector.</span></span><br><span class="line">    <span class="keyword">if</span> (!stationary) &#123;</span><br><span class="line">        vec2.sub(</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter,</span><br><span class="line">        <span class="keyword">this</span>.centerAtLastUpdate,</span><br><span class="line">        state.center</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.requestRender();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are stationary, the `layer.graphics` collection has not changed, and</span></span><br><span class="line">    <span class="comment">// we are centered on the `centerAtLastUpdate`, we do nothing.</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        !<span class="keyword">this</span>.needsUpdate &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter[<span class="number">0</span>] === <span class="number">0</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter[<span class="number">1</span>] === <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise, we record the new encoded center, which imply a reset of the `translationToCenter` vector,</span></span><br><span class="line">    <span class="comment">// we record the update time, and we proceed to update the buffers.</span></span><br><span class="line">    <span class="keyword">this</span>.centerAtLastUpdate.set(state.center);</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.needsUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> graphics = <span class="keyword">this</span>.layer.graphics;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate vertex data.</span></span><br><span class="line">    <span class="comment">// gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vertexData = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">7</span>*<span class="number">4</span> * graphics.length*<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">var</span> floatData = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(vertexData);</span><br><span class="line">    <span class="keyword">var</span> colorData = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(vertexData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    graphics.forEach(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">graphic</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> point = graphic.geometry;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The (x, y) position is relative to the encoded center.</span></span><br><span class="line">        <span class="keyword">var</span> x = point.x - <span class="keyword">this</span>.centerAtLastUpdate[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> y = point.y - <span class="keyword">this</span>.centerAtLastUpdate[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">0</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">1</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">2</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">3</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">4</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">5</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">6</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">7</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">8</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">9</span>] = <span class="number">0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">10</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">11</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">12</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">13</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">14</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">15</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">16</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">17</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">18</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">19</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">20</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">21</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">22</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">23</span>] = <span class="number">0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">24</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">25</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">26</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">27</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        ++i;</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generates index data.</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>.indexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> indexData = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">6</span> * graphics.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; graphics.length; ++i) &#123;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">0</span>] = i * <span class="number">4</span> + <span class="number">0</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">1</span>] = i * <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">2</span>] = i * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">3</span>] = i * <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">4</span>] = i * <span class="number">4</span> + <span class="number">3</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">5</span>] = i * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Record number of indices.</span></span><br><span class="line">    <span class="keyword">this</span>.indexBufferSize = indexData.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subclass the custom layer view from GraphicsLayer.</span></span><br><span class="line"><span class="keyword">var</span> CustomLayer = GraphicsLayer.createSubclass(&#123;</span><br><span class="line">    createLayerView: <span class="function"><span class="keyword">function</span> (<span class="params">view</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We only support MapView, so we only need to return a</span></span><br><span class="line">    <span class="comment">// custom layer view for the `2d` case.</span></span><br><span class="line">    <span class="keyword">if</span> (view.type === <span class="string">"2d"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomLayerView2D(&#123;</span><br><span class="line">        view: view,</span><br><span class="line">        layer: <span class="keyword">this</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an instance of the custom layer with 4 initial graphics.</span></span><br><span class="line"><span class="keyword">var</span> layer = <span class="keyword">new</span> CustomLayer(&#123;</span><br><span class="line">    popupTemplate: &#123;</span><br><span class="line">    title: <span class="string">"&#123;NAME&#125;"</span>,</span><br><span class="line">    content: <span class="string">"Population: &#123;POPULATION&#125;."</span></span><br><span class="line">    &#125;,</span><br><span class="line">    graphics: [</span><br><span class="line">    &#123;</span><br><span class="line">        geometry: webMercatorUtils.geographicToWebMercator(&#123;</span><br><span class="line">        <span class="comment">// Los Angeles</span></span><br><span class="line">        x: <span class="number">-118.2437</span>,</span><br><span class="line">        y: <span class="number">34.0522</span>,</span><br><span class="line">        type: <span class="string">"point"</span>,</span><br><span class="line">        spatialReference: &#123;</span><br><span class="line">            wkid: <span class="number">4326</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"Los Angeles"</span>,</span><br><span class="line">        POPULATION: <span class="number">3792621</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        geometry: webMercatorUtils.geographicToWebMercator(&#123;</span><br><span class="line">        <span class="comment">// Dallas</span></span><br><span class="line">        x: <span class="number">-96.797</span>,</span><br><span class="line">        y: <span class="number">32.7767</span>,</span><br><span class="line">        type: <span class="string">"point"</span>,</span><br><span class="line">        spatialReference: &#123;</span><br><span class="line">            wkid: <span class="number">4326</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"Dallas"</span>,</span><br><span class="line">        POPULATION: <span class="number">1197816</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        geometry: webMercatorUtils.geographicToWebMercator(&#123;</span><br><span class="line">        <span class="comment">// Denver</span></span><br><span class="line">        x: <span class="number">-104.9903</span>,</span><br><span class="line">        y: <span class="number">39.7392</span>,</span><br><span class="line">        type: <span class="string">"point"</span>,</span><br><span class="line">        spatialReference: &#123;</span><br><span class="line">            wkid: <span class="number">4326</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"Denver"</span>,</span><br><span class="line">        POPULATION: <span class="number">600158</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        geometry: webMercatorUtils.geographicToWebMercator(&#123;</span><br><span class="line">        <span class="comment">// New York</span></span><br><span class="line">        x: <span class="number">-74.006</span>,</span><br><span class="line">        y: <span class="number">40.7128</span>,</span><br><span class="line">        type: <span class="string">"point"</span>,</span><br><span class="line">        spatialReference: &#123;</span><br><span class="line">            wkid: <span class="number">4326</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"New York"</span>,</span><br><span class="line">        POPULATION: <span class="number">8175133</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the map and the view.</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">    basemap: <span class="string">"streets-night-vector"</span>,</span><br><span class="line">    layers: [layer]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">    container: <span class="string">"viewDiv"</span>,</span><br><span class="line">    map: map,</span><br><span class="line">    center: [<span class="number">-100</span>, <span class="number">40</span>],</span><br><span class="line">    zoom: <span class="number">3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lastFeatureId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add new graphics on double click.</span></span><br><span class="line">view.on(</span><br><span class="line">    <span class="string">"double-click"</span>,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    event.stopPropagation();</span><br><span class="line"></span><br><span class="line">    ++lastFeatureId;</span><br><span class="line"></span><br><span class="line">    layer.graphics.add(&#123;</span><br><span class="line">        geometry: event.mapPoint,</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"Feature #"</span> + lastFeatureId,</span><br><span class="line">        POPULATION: <span class="number">100000</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>整个代码的主体功能在于构造一个自定义的BaseLayerViewGL2D结构，将WebGL渲染嵌入我们自定义的图层中，然后重构对应的渲染方法进行渲染，我们先查看流程结构功能代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Subclass the custom layer view from GraphicsLayer.</span></span><br><span class="line"><span class="keyword">var</span> CustomLayer = GraphicsLayer.createSubclass(&#123;</span><br><span class="line">    createLayerView: <span class="function"><span class="keyword">function</span> (<span class="params">view</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We only support MapView, so we only need to return a</span></span><br><span class="line">    <span class="comment">// custom layer view for the `2d` case.</span></span><br><span class="line">    <span class="keyword">if</span> (view.type === <span class="string">"2d"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CustomLayerView2D(&#123;</span><br><span class="line">        view: view,</span><br><span class="line">        layer: <span class="keyword">this</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an instance of the custom layer with 4 initial graphics.</span></span><br><span class="line"><span class="keyword">var</span> layer = <span class="keyword">new</span> CustomLayer(&#123;</span><br><span class="line">    popupTemplate: &#123;</span><br><span class="line">    title: <span class="string">"&#123;NAME&#125;"</span>,</span><br><span class="line">    content: <span class="string">"Population: &#123;POPULATION&#125;."</span></span><br><span class="line">    &#125;,</span><br><span class="line">    graphics: [</span><br><span class="line">    &#123;</span><br><span class="line">        geometry: webMercatorUtils.geographicToWebMercator(&#123;</span><br><span class="line">        <span class="comment">// Los Angeles</span></span><br><span class="line">        x: <span class="number">-118.2437</span>,</span><br><span class="line">        y: <span class="number">34.0522</span>,</span><br><span class="line">        type: <span class="string">"point"</span>,</span><br><span class="line">        spatialReference: &#123;</span><br><span class="line">            wkid: <span class="number">4326</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        attributes: &#123;</span><br><span class="line">        NAME: <span class="string">"Los Angeles"</span>,</span><br><span class="line">        POPULATION: <span class="number">3792621</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;...&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the map and the view.</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(&#123;</span><br><span class="line">    basemap: <span class="string">"streets-night-vector"</span>,</span><br><span class="line">    layers: [layer]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> MapView(&#123;</span><br><span class="line">    container: <span class="string">"viewDiv"</span>,</span><br><span class="line">    map: map,</span><br><span class="line">    center: [<span class="number">-100</span>, <span class="number">40</span>],</span><br><span class="line">    zoom: <span class="number">3</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>实际上添加图层的过程相对比较简单，首先根据前面定义的自定义layer，CustomLayerView2D创建一个layer类，然后往其中添加graphic数据，最后将图层添加到map中，最后在view中进行展示，所以整个流程可以描述为[自定义WebGL绘制图层]-&gt;[新建图层]-&gt;[初始化图层数据（往图层中添加数据）]-&gt;[将图层添加到map中]其他的步骤都跟添加一个普通的图层没有区别，其中最核心的部分在于“自定义WebGL绘制图层”，我们把定义绘制图层的部分截取出来并进行详细的注释描述<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> CustomLayerView2D = BaseLayerViewGL2D.createSubclass(&#123;</span><br><span class="line">    <span class="comment">// Locations of the two vertex attributes that we use. They</span></span><br><span class="line">    <span class="comment">// will be bound to the shader program before linking.</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在这里定义三个位置，实际上这三个变量只是占位索引而已，所以编码是从0-N</span></span><br><span class="line">    aPosition: <span class="number">0</span>,</span><br><span class="line">    aOffset: <span class="number">1</span>,</span><br><span class="line">    aColor:<span class="number">2</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重构的构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>: function () &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Geometrical transformations that must be recomputed</span></span><br><span class="line">    <span class="comment">// from scratch at every frame.</span></span><br><span class="line">    <span class="comment">// 这里有两个转换，WebGL的坐标是屏幕坐标而实际上点的坐标为经纬度或web mector投影坐标，所以转换的过程为</span></span><br><span class="line">    <span class="comment">// 如果为经纬度则首先转换为web mector，然后去中心化，然后计算为屏幕坐标</span></span><br><span class="line">    <span class="keyword">this</span>.transform = mat3.create();</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter = vec2.create();</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation = vec2.create();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Geometrical transformations whose only a few elements</span></span><br><span class="line">    <span class="comment">// must be updated per frame. Those elements are marked</span></span><br><span class="line">    <span class="comment">// with NaN.</span></span><br><span class="line">    <span class="keyword">this</span>.display = mat3.fromValues(<span class="literal">NaN</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NaN</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">this</span>.screenScaling = vec3.fromValues(<span class="literal">NaN</span>, <span class="literal">NaN</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Whether the vertex and index buffers need to be updated</span></span><br><span class="line">    <span class="comment">// due to a change in the layer data.</span></span><br><span class="line">    <span class="keyword">this</span>.needsUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// We listen for changes to the graphics collection of the layer</span></span><br><span class="line">    <span class="comment">// and trigger the generation of new frames. A frame rendered while</span></span><br><span class="line">    <span class="comment">// `needsUpdate` is true may cause an update of the vertex and</span></span><br><span class="line">    <span class="comment">// index buffers.</span></span><br><span class="line">    <span class="keyword">var</span> requestUpdate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.needsUpdate = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.requestRender();</span><br><span class="line">    &#125;.bind(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.watcher = watchUtils.on(</span><br><span class="line">        <span class="keyword">this</span>,</span><br><span class="line">        <span class="string">"layer.graphics"</span>,</span><br><span class="line">        <span class="string">"change"</span>,</span><br><span class="line">        requestUpdate,</span><br><span class="line">        requestUpdate,</span><br><span class="line">        requestUpdate</span><br><span class="line">    );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called once a custom layer is added to the map.layers collection and this layer view is instantiated.</span></span><br><span class="line">    attach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Define and compile shaders.</span></span><br><span class="line">    <span class="comment">// 实际上这个部分就是初始化gl并定义渲染方法的部分，</span></span><br><span class="line">    <span class="comment">// 在此部分定义传入变量，包括a_position，a_offset，a_color</span></span><br><span class="line">    <span class="comment">// 然后根据传入遍历对着色器进行渲染最后得到渲染后的结果</span></span><br><span class="line">    <span class="keyword">var</span> vertexSource =</span><br><span class="line">        <span class="string">"precision highp float;"</span> +</span><br><span class="line">        <span class="string">"uniform mat3 u_transform;"</span> +</span><br><span class="line">        <span class="string">"uniform mat3 u_display;"</span> +</span><br><span class="line">        <span class="string">"attribute vec2 a_position;"</span> +</span><br><span class="line">        <span class="string">"attribute vec2 a_offset;"</span> +</span><br><span class="line">        <span class="string">"attribute vec3 a_color;"</span> +</span><br><span class="line">        <span class="string">"varying vec2 v_offset;"</span> +</span><br><span class="line">        <span class="string">"varying vec3 v_color;"</span> +</span><br><span class="line">        <span class="string">"const float SIZE = 70.0;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"    gl_Position.xy = (u_display * (u_transform * vec3(a_position, 1.0) + vec3(a_offset * SIZE, 0.0))).xy;"</span> +</span><br><span class="line">        <span class="string">"    gl_Position.zw = vec2(0.0, 1.0);"</span> +</span><br><span class="line">        <span class="string">"    v_offset = a_offset;"</span> +</span><br><span class="line">        <span class="string">"    v_color = a_color;"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fragmentSource =</span><br><span class="line">        <span class="string">"precision highp float;"</span> +</span><br><span class="line">        <span class="string">"uniform float u_current_time;"</span> +</span><br><span class="line">        <span class="string">"varying vec2 v_offset;"</span> +</span><br><span class="line">        <span class="string">"varying vec3 v_color;"</span> +</span><br><span class="line">        <span class="string">"const float PI = 3.14159;"</span> +</span><br><span class="line">        <span class="string">"const float N_RINGS = 3.0;"</span> +</span><br><span class="line">        <span class="string">"const vec3 COLOR = vec3(0.23, 0.43, 0.70);"</span> +</span><br><span class="line">        <span class="string">"const float FREQ = 1.0;"</span> +</span><br><span class="line">        <span class="string">"void main() &#123;"</span> +</span><br><span class="line">        <span class="string">"    float l = length(v_offset);"</span> +</span><br><span class="line">        <span class="string">"    float intensity = clamp(cos(l * PI), 0.0, 1.0) * clamp(cos(2.0 * PI * (l * 2.0 * N_RINGS - FREQ * u_current_time)), 0.0, 1.0);"</span> +</span><br><span class="line">        <span class="string">"    gl_FragColor = vec4(v_color * intensity, intensity);"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> vertexShader = gl.createShader(gl.VERTEX_SHADER);</span><br><span class="line">    gl.shaderSource(vertexShader, vertexSource);</span><br><span class="line">    gl.compileShader(vertexShader);</span><br><span class="line">    <span class="keyword">var</span> fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);</span><br><span class="line">    gl.shaderSource(fragmentShader, fragmentSource);</span><br><span class="line">    gl.compileShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the shader program.</span></span><br><span class="line">    <span class="keyword">this</span>.program = gl.createProgram();</span><br><span class="line">    gl.attachShader(<span class="keyword">this</span>.program, vertexShader);</span><br><span class="line">    gl.attachShader(<span class="keyword">this</span>.program, fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bind attributes.</span></span><br><span class="line">    <span class="comment">// 此部分要注意，绑定渲染器的顺序一定要按照前面定义的遍历的顺序来0-N的顺序</span></span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aPosition, <span class="string">"a_position"</span>);</span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aOffset, <span class="string">"a_offset"</span>);</span><br><span class="line">    gl.bindAttribLocation(<span class="keyword">this</span>.program, <span class="keyword">this</span>.aColor, <span class="string">"a_color"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Link.</span></span><br><span class="line">    gl.linkProgram(<span class="keyword">this</span>.program);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Shader objects are not needed anymore.</span></span><br><span class="line">    gl.deleteShader(vertexShader);</span><br><span class="line">    gl.deleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Retrieve uniform locations once and for all.</span></span><br><span class="line">    <span class="comment">// 如果字节映射出问题这里经常会报一个警告，</span></span><br><span class="line">    <span class="comment">// 所以这边出现警告的时候需要结合前后代码进行判断</span></span><br><span class="line">    <span class="keyword">this</span>.uTransform = gl.getUniformLocation(</span><br><span class="line">        <span class="keyword">this</span>.program,</span><br><span class="line">        <span class="string">"u_transform"</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.uDisplay = gl.getUniformLocation(<span class="keyword">this</span>.program, <span class="string">"u_display"</span>);</span><br><span class="line">    <span class="keyword">this</span>.uCurrentTime = gl.getUniformLocation(</span><br><span class="line">        <span class="keyword">this</span>.program,</span><br><span class="line">        <span class="string">"u_current_time"</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the vertex and index buffer. They are initially empty. We need to track the</span></span><br><span class="line">    <span class="comment">// size of the index buffer because we use indexed drawing.</span></span><br><span class="line">    <span class="keyword">this</span>.vertexBuffer = gl.createBuffer();</span><br><span class="line">    <span class="keyword">this</span>.indexBuffer = gl.createBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Number of indices in the index buffer.</span></span><br><span class="line">    <span class="keyword">this</span>.indexBufferSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// When certain conditions occur, we update the buffers and re-compute and re-encode</span></span><br><span class="line">    <span class="comment">// all the attributes. When buffer update occurs, we also take note of the current center</span></span><br><span class="line">    <span class="comment">// of the view state, and we reset a vector called `translationToCenter` to [0, 0], meaning that the</span></span><br><span class="line">    <span class="comment">// current center is the same as it was when the attributes were recomputed.</span></span><br><span class="line">    <span class="keyword">this</span>.centerAtLastUpdate = vec2.fromValues(</span><br><span class="line">        <span class="keyword">this</span>.view.state.center[<span class="number">0</span>],</span><br><span class="line">        <span class="keyword">this</span>.view.state.center[<span class="number">1</span>]</span><br><span class="line">    );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called once a custom layer is removed from the map.layers collection and this layer view is destroyed.</span></span><br><span class="line">    detach: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Stop watching the `layer.graphics` collection.</span></span><br><span class="line">    <span class="keyword">this</span>.watcher.remove();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> gl = <span class="keyword">this</span>.context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Delete buffers and programs.</span></span><br><span class="line">    gl.deleteBuffer(<span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.deleteBuffer(<span class="keyword">this</span>.indexBuffer);</span><br><span class="line">    gl.deleteProgram(<span class="keyword">this</span>.program);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called every time a frame is rendered.</span></span><br><span class="line">    render: <span class="function"><span class="keyword">function</span> (<span class="params">renderParameters</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此函数中主要是渲染和绘制的过程，具体的渲染方式以及转换矩阵的操作可以去参考    </span></span><br><span class="line">    <span class="keyword">var</span> gl = renderParameters.context;</span><br><span class="line">    <span class="keyword">var</span> state = renderParameters.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update vertex positions. This may trigger an update of</span></span><br><span class="line">    <span class="comment">// the vertex coordinates contained in the vertex buffer.</span></span><br><span class="line">    <span class="comment">// There are three kinds of updates:</span></span><br><span class="line">    <span class="comment">//  - Modification of the layer.graphics collection ==&gt; Buffer update</span></span><br><span class="line">    <span class="comment">//  - The view state becomes non-stationary ==&gt; Only view update, no buffer update</span></span><br><span class="line">    <span class="comment">//  - The view state becomes stationary ==&gt; Buffer update</span></span><br><span class="line">    <span class="keyword">this</span>.updatePositions(renderParameters);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If there is nothing to render we return.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.indexBufferSize === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update view `transform` matrix; it converts from map units to pixels.</span></span><br><span class="line">    mat3.identity(<span class="keyword">this</span>.transform);</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation[<span class="number">0</span>] = (state.pixelRatio * state.size[<span class="number">0</span>]) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">this</span>.screenTranslation[<span class="number">1</span>] = (state.pixelRatio * state.size[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">    mat3.translate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.screenTranslation</span><br><span class="line">    );</span><br><span class="line">    mat3.rotate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        (<span class="built_in">Math</span>.PI * state.rotation) / <span class="number">180</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">this</span>.screenScaling[<span class="number">0</span>] = state.pixelRatio / state.resolution;</span><br><span class="line">    <span class="keyword">this</span>.screenScaling[<span class="number">1</span>] = -state.pixelRatio / state.resolution;</span><br><span class="line">    mat3.scale(<span class="keyword">this</span>.transform, <span class="keyword">this</span>.transform, <span class="keyword">this</span>.screenScaling);</span><br><span class="line">    mat3.translate(</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.transform,</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update view `display` matrix; it converts from pixels to normalized device coordinates.</span></span><br><span class="line">    <span class="keyword">this</span>.display[<span class="number">0</span>] = <span class="number">2</span> / (state.pixelRatio * state.size[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">this</span>.display[<span class="number">4</span>] = <span class="number">-2</span> / (state.pixelRatio * state.size[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Draw.</span></span><br><span class="line">    gl.useProgram(<span class="keyword">this</span>.program);</span><br><span class="line">    gl.uniformMatrix3fv(<span class="keyword">this</span>.uTransform, <span class="literal">false</span>, <span class="keyword">this</span>.transform);</span><br><span class="line">    gl.uniformMatrix3fv(<span class="keyword">this</span>.uDisplay, <span class="literal">false</span>, <span class="keyword">this</span>.display);</span><br><span class="line">    gl.uniform1f(<span class="keyword">this</span>.uCurrentTime, performance.now() / <span class="number">1000.0</span>);</span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>.indexBuffer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判定变量</span></span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aPosition);</span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aOffset);</span><br><span class="line">    gl.enableVertexAttribArray(<span class="keyword">this</span>.aColor);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字节映射</span></span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aPosition, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">28</span>, <span class="number">0</span>);</span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aOffset, <span class="number">2</span>, gl.FLOAT, <span class="literal">false</span>, <span class="number">28</span>, <span class="number">8</span>);</span><br><span class="line">    gl.vertexAttribPointer(<span class="keyword">this</span>.aColor,<span class="number">3</span>,gl.FLOAT,<span class="literal">false</span>,<span class="number">28</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    gl.enable(gl.BLEND);</span><br><span class="line">    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);</span><br><span class="line">    gl.drawElements(</span><br><span class="line">        gl.TRIANGLES,</span><br><span class="line">        <span class="keyword">this</span>.indexBufferSize,</span><br><span class="line">        gl.UNSIGNED_SHORT,</span><br><span class="line">        <span class="number">0</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Request new render because markers are animated.</span></span><br><span class="line">    <span class="keyword">this</span>.requestRender();</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called by the map view or the popup view when hit testing is required.</span></span><br><span class="line">    hitTest: <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// The map view.</span></span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">this</span>.view;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.layer.graphics.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Nothing to do.</span></span><br><span class="line">        <span class="keyword">return</span> promiseUtils.resolve(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Compute screen distance between each graphic and the test point.</span></span><br><span class="line">    <span class="keyword">var</span> distances = <span class="keyword">this</span>.layer.graphics.map(<span class="function"><span class="keyword">function</span> (<span class="params">graphic</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> graphicPoint = view.toScreen(graphic.geometry);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">        (graphicPoint.x - x) * (graphicPoint.x - x) +</span><br><span class="line">            (graphicPoint.y - y) * (graphicPoint.y - y)</span><br><span class="line">        );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Find the minimum distance.</span></span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    distances.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">distance, i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (distance &lt; distances.getItemAt(minIndex)) &#123;</span><br><span class="line">        minIndex = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> minDistance = distances.getItemAt(minIndex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If the minimum distance is more than 35 pixel then nothing was hit.</span></span><br><span class="line">    <span class="keyword">if</span> (minDistance &gt; <span class="number">35</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> promiseUtils.resolve(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise it is a hit; We set the layer as the source layer for the graphic</span></span><br><span class="line">    <span class="comment">// (required for the popup view to work) and we return a resolving promise to</span></span><br><span class="line">    <span class="comment">// the graphic.</span></span><br><span class="line">    <span class="comment">// 点击事件，返回graphic</span></span><br><span class="line">    <span class="keyword">var</span> graphic = <span class="keyword">this</span>.layer.graphics.getItemAt(minIndex);</span><br><span class="line">    graphic.sourceLayer = <span class="keyword">this</span>.layer;</span><br><span class="line">    <span class="keyword">return</span> promiseUtils.resolve(graphic);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Called internally from render().</span></span><br><span class="line">    updatePositions: <span class="function"><span class="keyword">function</span> (<span class="params">renderParameters</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gl = renderParameters.context;</span><br><span class="line">    <span class="keyword">var</span> stationary = renderParameters.stationary;</span><br><span class="line">    <span class="keyword">var</span> state = renderParameters.state;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are not stationary we simply update the `translationToCenter` vector.</span></span><br><span class="line">    <span class="keyword">if</span> (!stationary) &#123;</span><br><span class="line">        vec2.sub(</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter,</span><br><span class="line">        <span class="keyword">this</span>.centerAtLastUpdate,</span><br><span class="line">        state.center</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">this</span>.requestRender();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// If we are stationary, the `layer.graphics` collection has not changed, and</span></span><br><span class="line">    <span class="comment">// we are centered on the `centerAtLastUpdate`, we do nothing.</span></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        !<span class="keyword">this</span>.needsUpdate &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter[<span class="number">0</span>] === <span class="number">0</span> &amp;&amp;</span><br><span class="line">        <span class="keyword">this</span>.translationToCenter[<span class="number">1</span>] === <span class="number">0</span></span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Otherwise, we record the new encoded center, which imply a reset of the `translationToCenter` vector,</span></span><br><span class="line">    <span class="comment">// we record the update time, and we proceed to update the buffers.</span></span><br><span class="line">    <span class="keyword">this</span>.centerAtLastUpdate.set(state.center);</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.translationToCenter[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.needsUpdate = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> graphics = <span class="keyword">this</span>.layer.graphics;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate vertex data.</span></span><br><span class="line">    <span class="comment">// gl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);</span></span><br><span class="line">    <span class="comment">// 一共有多少字节，实际上每一个点有两个坐标x，y，然后两个方向变量，再加3个float的RGB颜色变量，每次绘制四个点</span></span><br><span class="line">    <span class="keyword">var</span> vertexData = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">7</span>*<span class="number">4</span> * graphics.length*<span class="number">4</span>);</span><br><span class="line">    <span class="comment">// 映射坐标和方向变量</span></span><br><span class="line">    <span class="keyword">var</span> floatData = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(vertexData);</span><br><span class="line">    <span class="comment">// 颜色变量</span></span><br><span class="line">    <span class="keyword">var</span> colorData = <span class="keyword">new</span> <span class="built_in">Float32Array</span>(vertexData);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    graphics.forEach(</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">graphic</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> point = graphic.geometry;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// The (x, y) position is relative to the encoded center.</span></span><br><span class="line">        <span class="keyword">var</span> x = point.x - <span class="keyword">this</span>.centerAtLastUpdate[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> y = point.y - <span class="keyword">this</span>.centerAtLastUpdate[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">0</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">1</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">2</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">3</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">4</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">5</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">6</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">7</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">8</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">9</span>] = <span class="number">0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">10</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">11</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">12</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">13</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">14</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">15</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">16</span>] = <span class="number">-0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">17</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">18</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">19</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">20</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">21</span>] = x;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">22</span>] = y;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">23</span>] = <span class="number">0.5</span>;</span><br><span class="line">        floatData[i * <span class="number">28</span> + <span class="number">24</span>] = <span class="number">0.5</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">25</span>] = <span class="number">1</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">26</span>] = <span class="number">0.43</span>;</span><br><span class="line">        colorData[i * <span class="number">28</span> + <span class="number">27</span>] = <span class="number">0.70</span>;</span><br><span class="line"></span><br><span class="line">        ++i;</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定数据</span></span><br><span class="line">    gl.bindBuffer(gl.ARRAY_BUFFER, <span class="keyword">this</span>.vertexBuffer);</span><br><span class="line">    gl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generates index data.</span></span><br><span class="line">    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, <span class="keyword">this</span>.indexBuffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绘制的映射</span></span><br><span class="line">    <span class="keyword">var</span> indexData = <span class="keyword">new</span> <span class="built_in">Uint16Array</span>(<span class="number">6</span> * graphics.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; graphics.length; ++i) &#123;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">0</span>] = i * <span class="number">4</span> + <span class="number">0</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">1</span>] = i * <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">2</span>] = i * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">3</span>] = i * <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">4</span>] = i * <span class="number">4</span> + <span class="number">3</span>;</span><br><span class="line">        indexData[i * <span class="number">6</span> + <span class="number">5</span>] = i * <span class="number">4</span> + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indexData, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Record number of indices.</span></span><br><span class="line">    <span class="keyword">this</span>.indexBufferSize = indexData.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;目前GIS应用过程中，对于渲染效果的要求越来越高最好能够采用一些动画来实现渲染效果的优化，而在ArcGIS js API中直接通过FeatureLayer只能够渲染一些简单的图标，难以完成动画效果的展示，为了能够展示比较好的渲
      
    
    </summary>
    
      <category term="学习" scheme="http://www.wuweiblog.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ArcGIS，前端开发" scheme="http://www.wuweiblog.com/tags/ArcGIS%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>狗子日记十一月四号</title>
    <link href="http://www.wuweiblog.com/2020/10/30/%E7%8B%97%E5%AD%90%E6%97%A5%E8%AE%B0%E5%8D%81%E4%B8%80%E6%9C%88%E5%9B%9B%E5%8F%B7/"/>
    <id>http://www.wuweiblog.com/2020/10/30/狗子日记十一月四号/</id>
    <published>2020-10-30T03:44:44.666Z</published>
    <updated>2020-10-30T03:44:44.667Z</updated>
    
    <content type="html"><![CDATA[<p>下午的时候刘艳在家打扫卫生，她突然很激动的跟我说：＂我捡到了一粒黑色的扣子！＂<br>我表示一脸茫然，怎么会有黑色扣子，难道是哪件衣服上掉的？于是我说：＂黑色扣子，怎么会有黑色扣子？＂<br>随后又传来一声尖叫:”啊～～～！”<br>把我吓了一跳，＂怎么啦！＂我赶紧问．然后出去看看发生了啥.<br>她看到我出来又很激动的跟我说：＂那个不是黑色的扣子，那个是菜包的屎，沾上了它的毛～气死我啦！＂<br>于是我们转头看向菜包，正趴在地上的菜包感觉到了我们两个人充满杀气的目光突然惊恐的站了起来：＂你们要干啥！你们不要这么看着本大王~＂<br>于是我们开始质问:”菜包，你怎么把你的粑粑弄到客厅来了~”<br>菜包一脸茫然：＂你在说什么，我完全听不懂的样子!＂<br>我们满头黑线:”….你又在装，看来每天不揍你你就不舒服呀！”，于是我抄起了我的拖鞋．<br>菜包吓得赶快翻肚皮：＂我冤枉呀～，我真的什么都不知道，你们就是打死我也没有用呀~＂<br>本着宁可错杀一千不能放过一个的原则，我们依然把菜包揍了一顿，然后心满意足的回房间了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下午的时候刘艳在家打扫卫生，她突然很激动的跟我说：＂我捡到了一粒黑色的扣子！＂&lt;br&gt;我表示一脸茫然，怎么会有黑色扣子，难道是哪件衣服上掉的？于是我说：＂黑色扣子，怎么会有黑色扣子？＂&lt;br&gt;随后又传来一声尖叫:”啊～～～！”&lt;br&gt;把我吓了一跳，＂怎么啦！＂我赶紧问．然后
      
    
    </summary>
    
      <category term="小说" scheme="http://www.wuweiblog.com/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="狗子日记" scheme="http://www.wuweiblog.com/tags/%E7%8B%97%E5%AD%90%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>点云处理总结</title>
    <link href="http://www.wuweiblog.com/2020/10/18/%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>http://www.wuweiblog.com/2020/10/18/点云处理总结/</id>
    <published>2020-10-18T08:23:23.000Z</published>
    <updated>2020-10-30T03:44:44.645Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;很长时间都没有好好的总结一下技术，感觉时间不是很够用，白天上班回来之后只想玩手机，有不少人建议租个近一点的房子住，但是我总是不太想，毕竟在自己的房子里还是更加舒服一点，从周一开始就盼望着到周五，然后周末能够在家休息一下，其实最后哪儿都没去，就宅在家玩手机睡觉，应该打扫的卫生也不想打扫，应该练的琴也不想练，应该泡的茶也没有泡，应该写的博客也没有写，好像就处于一个混吃等死的状态，今天天气特别好，借着这个机会也是好好的把前一段时间思考的关于点云的问题以及最近做的一些论文的内容都补充上去。<br>&nbsp;&nbsp;&nbsp;&nbsp;这两年关于点云处理的文章也写了快三篇了，从工作之后就开始在自己的时间做一些关于无人机影像处理和点云处理方面的工作，没有特别大的用处，就是一些论文的算法和一些工具而已，感觉在重复的造着轮子，不过我感觉好像用C++编码的人都喜欢自己造轮子。不管怎么样还是造了一些有意义的东西，所以这里我还是总结一下：</p><h2 id="点云索引："><a href="#点云索引：" class="headerlink" title="点云索引："></a>点云索引：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;关于点云索引这个部分，实际上还是有很多可以提的地方，当时自己写关于LAS文件处理的代码的时候在这一块实际上做了很多的思考了工作也进行了一些尝试，激光点云的具体概念我们就不多做说明，本文中提到的点云都是指小光斑的激光雷达的点云或者通过影像获取的点云，只考虑点云位置信息，对于点云回波波形就不再考虑了。由于点云是空间离散结构，即点云中任意两个点之间从没有明确的拓扑关系由此对于点云的一些操作就需要通过遍历所有点来实现，为了简化搜索的范围有许多点云索引的算法就构建出来了，其中八叉树和R树是最常见的索引方式，实际上两种方式都是从空间分割的角度对点云进行索引。</p><h3 id="八叉树索引："><a href="#八叉树索引：" class="headerlink" title="八叉树索引："></a>八叉树索引：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;其实八叉树索引没有什么好说的，实际上就是类似我们的魔法，在空间上根据一定的空间正6面体对整个点云空间进行分割，分割后每个立方体中的点云数量就减少了，由此减小搜索范围提高效率，索引方法简单有效，能够一定程度上提高点云检索的效率，不过他的缺点也很明显，因为是按照固定的大小分割，所以实际上每一个空间正6面体中包含的点云数量是不一样的，因此实际上提高的检索效率要明显低于理论值，另外对于空间检索不仅需要考虑点云所在的立方体还要考虑其周围一定范围内的立方体，每次计算都需要空间求交集。对于索引方式的问题，目前似乎没有好的方法处理，不过对于点云密度不均匀的问题，采用点云密度约束的算法，允许点云块之间有重叠就可以解决，此类算法有不少学者进行了研究和实践都比较成熟了。</p><h3 id="R树索引："><a href="#R树索引：" class="headerlink" title="R树索引："></a>R树索引：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;R树索引实际上也是一种对空间进行分割的索引，对N维空间采用不停的2分的方式进行处理，每一次都能够将空间按某一个值氛围两个部分，这样在检索过程中直接判断点云在哪个部分就可以实现对点云进行检索，构建索引后检索效率极高是一种常用的处理方式，然而采用此种方式构建点云索引的时间稍长，在构建点云索引上还存在优化空间。<br>&nbsp;&nbsp;&nbsp;&nbsp; 在我以下的论文中实现了结合四叉树和R树的索引方式对点云索引进行优化<a href="https://xueshu.baidu.com/usercenter/paper/show?paperid=1u6x0te0x5400rq0g94m0tc0k4341794&amp;site=xueshu_se" target="_blank" rel="noopener">吴蔚, 刘岚, 黄文诚. 基于渐进三角网的线路巡检点云地面点快速提取方法[J]. 南方能源建设, 2020(S1).</a>算法已经<a href="https://github.com/RemoteSensingFrank/LidarProc.git" target="_blank" rel="noopener">开源实现</a>有兴趣的朋友们可以试试。</p><h2 id="点云存储："><a href="#点云存储：" class="headerlink" title="点云存储："></a>点云存储：</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;实际上LAS文件存储格式没有什么好说的格式在网上还是很多，开源格式解释得也很明确了，我们这里讨论的点云存储是只点云在处理过程中考虑到内存问题的点云存储，实际上点云文件一般都很大，当然我们可以采用分割或者其他的方式把点云数据文件缩小，但是这种缩小点云文件的方式毕竟存在较多的问题，且需要点云能够划分为满足计算的小单元才行，当然这个问题实际上还可以通过增加内存大小来解决，毕竟xx64的寻址空间，只要硬件能更得上好像也不是什么大问题，不过本着对算法负责的严谨态度我们还是讨论一下，对于那些无法一次全部读入内存的点云的处理方式。主要方式包括点云抽稀和只读索引的方式。抽稀的方式还是比较好理解，而只读索引的方式主要是采用时间换空间的模式，对点云id构建索引，在点云处理的计算过程中直接在从文件中映射点云位置读取对应位置的点云，此种方式不停的对硬盘空间进行寻址和读取效率比较低，好处在于内存中只保存点云索引，空间消耗极小，不过对于大规模点云效率较低，实际上应用性并不是太好，当然此种方式也有改进，这个就留到以后再讨论。</p><h2 id="点云处理："><a href="#点云处理：" class="headerlink" title="点云处理："></a>点云处理：</h2><h3 id="聚类："><a href="#聚类：" class="headerlink" title="聚类："></a>聚类：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;不太想描述这个，不过总的来说如果对点云直接离散的处理就逃不过聚类的方法，聚类的方法有很多，区域生长方法，K均值方法，总的来说就是将点云聚集成很多点云团，然后这些点云团我们认为是具有同一属性和特征，然后对这些点云团进行处理，这样每个点云团就包含了点云的结构特征，可以对点云结构特征进行分析，这其中就可以添加一系列的算法了。</p><h3 id="点云体素化："><a href="#点云体素化：" class="headerlink" title="点云体素化："></a>点云体素化：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;实际上这个也算得上是一个比较通用的算法，我们结合八叉树的思想将点云分块，然后计算每一块的密度值作为点云体素的特征，这样点云就在空间上构成了一个连续的点云空间，在此基础上很多针对连续空间使用的算法就可以应用起来了，同时也可以引入很多二维图像的算法进行处理。<br>&nbsp;&nbsp;&nbsp;&nbsp; 其实点云的处理并不是特别有难度，只要构建好了点云的基础结构，后续主要是针对应用进行研究，针对特定的应用对通用的算法进行改进和优化使得算法能够在特定的应用上发挥比较大的效果，这样整个点云处理都变得更加有意义。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很长时间都没有好好的总结一下技术，感觉时间不是很够用，白天上班回来之后只想玩手机，有不少人建议租个近一点的房子住，但是我总是不太想，毕竟在自己的房子里还是更加舒服一点，从周一开始就盼望着到周五，然后周末能够在家休息一下，其实最
      
    
    </summary>
    
      <category term="点云处理" scheme="http://www.wuweiblog.com/categories/%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86/"/>
    
    
      <category term="点云处理" scheme="http://www.wuweiblog.com/tags/%E7%82%B9%E4%BA%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>关于方向</title>
    <link href="http://www.wuweiblog.com/2020/09/13/%E5%85%B3%E4%BA%8E%E6%96%B9%E5%90%91/"/>
    <id>http://www.wuweiblog.com/2020/09/13/关于方向/</id>
    <published>2020-09-13T00:15:13.000Z</published>
    <updated>2020-10-30T03:44:44.362Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;题目拟在这里很久了，一直没有来得及写点东西，一直觉得不知道写点什么，休假在家陪老婆待了几天，感觉整个精神状态也没有想象中的那么好，家里的天气不是很好，这几天全部都是阴沉沉的，让人感觉有点恼。相比于在公司上班，在家确实轻松了很多，也有了很多时间来思考。更多的思考是有意义的，总是埋头干活也需要花些时间抬起头看看路。最近睡觉也总是在做一些奇奇怪怪的梦，总是感觉有点累，不过好在睡觉的时间比较长，所以一切也都还好。<br>&nbsp;&nbsp;&nbsp;&nbsp;妈妈刚刚打电话过来跟我说小姑父去世了，不禁叹了一口气，好像亲人们都渐渐走远了，好像大家生活也挺艰难的，我们面临着太多的问题和困难，不知道需要多大的勇气才能过好这一生。几年前大姑和姑父去世了，如今小姑父又去世了，其实人去世了，在这个世界上也留下不了什么痕迹，大多数人都是这样，我们活了一辈子，到死去实际上不过是见证了一下这个时代而已，对于我们自己来说似乎很重要，但是对于这个世界来说真的不太重要，不知道在弥留之际小姑父心里会想些什么，不知道在回顾自己一生的时候会不会有些许后悔。<br>&nbsp;&nbsp;&nbsp;&nbsp;最近宝宝也要出生了，虽然一直没有信心能够带好他，不过也慢慢接受了他，给他想了一个名字，不知道以后他会怎样，会不会好好学习，以后有没有能力去面对他所要经历的风风雨雨。也许有很多父母存着希望自己子女有成就的想法，我好像并没有，因为我自己也没有啥成就，我知道面对学习，面对生活，面对成长中的一切其实并不是那么容易，我表面上看似乐观，实际上是一个谨慎的悲观主义者，这样的性格有很多原因，我希望以后他不要像我这样，我不希望他经历我所经历的压力，不过每一代人都有自己的压力，我希望我能够理解他。在家休息了这么多天，精神状态还是好了不少，不管怎么样以后生活还是要继续，同志仍需努力，对宝宝，我希望他成为一个平凡快乐的普通人，我希望他能享受好的也能承受坏的，我希望他能够有足够的眼光与能力去做出选择与决定，也能够有足够的决心和毅力去接受每一个决定的艰难与后果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;题目拟在这里很久了，一直没有来得及写点东西，一直觉得不知道写点什么，休假在家陪老婆待了几天，感觉整个精神状态也没有想象中的那么好，家里的天气不是很好，这几天全部都是阴沉沉的，让人感觉有点恼。相比于在公司上班，在家确实轻松了很多
      
    
    </summary>
    
      <category term="随感" scheme="http://www.wuweiblog.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>社会青年</title>
    <link href="http://www.wuweiblog.com/2020/09/05/%E7%A4%BE%E4%BC%9A%E9%9D%92%E5%B9%B4/"/>
    <id>http://www.wuweiblog.com/2020/09/05/社会青年/</id>
    <published>2020-09-05T01:21:45.000Z</published>
    <updated>2020-10-30T03:44:44.725Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;很早就想写一篇文章又不知道应该叫什么题目，所以就随便取了个题目。最近很忙，项目执行，项目验收，还有准备考试，总是被这些事情压的喘不过气来，觉得自己随时可能会崩溃，特别是上周一周熬了两个通宵，两天晚上工作超过凌晨。人处于真正忙碌或者感觉到累的时候思绪就会很多，会思考得更多，也许这就是我们所说的收获吧，不过这样的收获似乎对我来说经历过一次就好，不用过多的经历了。<br>&nbsp;&nbsp;&nbsp;&nbsp;最近知乎在等公交的时候刷知乎总是给我推送一些当代社会青年为什么普遍都没有什么欲望的问题，也不知道为什么会给我这样一个”事业有成，家庭幸福”的人推送这样的话题，所以实际上恐婚，恐育，惧怕生活或者说不想面对生活，这大概不只是我的问题，而是当代青年普遍的问题。至于出现这种情况的原因，有很多人已经说得很明确了，什么社会发展放缓，房价过高还有等等的原因，总而言之从各个方面说明了当代青年没有希望。有很多人批判年轻人承压能力太弱，实际上每一代人似乎都在批判中度过，前几天听了《人类简史》的一些观点，作者认为采集狩猎时代的人所获得的快乐不一定比农耕时代少，而且似乎因为食物种类更加丰富所以营养更加丰富，我不知道是不是因为东西方文化的差异，我总感觉这个观点中似乎缺少了一点什么，结合最近看到的知乎的讨论我似乎明白了，以宗教为基础的作者或者思路是很难理解我们非宗教文化的执念的，如果我们不去思考未知，一切都是上帝的安排和旨意，那么采集狩猎的生活当然更加幸福。但是我们生而为人，对我们最重要的其实是希望，我们可以为了希望忍受劳作的辛苦，为了希望去开垦更多的土地，而不是等待着上帝的恩赐。这也就是当代社会青年所面临的困境，没有希望。我们可以忍受996，甚至007的工作如果这个工作是有希望的，我们也可以生养一个，两个小孩儿，如果我们知道将来他们一定能生活得比我们更好。但是实际上这些都没有，我们996的工作也只能维持基本的生活，我们费尽心力生养的小孩儿也许以后连工作都找不到，所以我们主动放弃了对希望的追求，这大概就是大家所说的丧了吧。<br>&nbsp;&nbsp;&nbsp;&nbsp;实际上，丧这件事情他并不容易，我认为丧是一个智慧生命最高级理智的实现，是对我们动物性最极致的克制，可在我们基因中的是什么？是对欲望的追求，权力的追求，对基因传递的需求，我们人类已经被动物性的基因俘虏的几十万年一直都不曾改变，所以我们一直都属于动物，我们与所有动物一样被基因传递的欲望支配着，直到现代，从工业革命开始到如今，我们才开始真正发生改变，我们渐渐脱离了动物性，我们与他们已经不是同一物种了，我们努力的方向不是使我们人类这个物种繁衍昌盛，而是在努力使其灭亡，我想这大概就是理性生命发展的最高阶段吧，我们不为基因而活，我们只为希望而活，没有希望的话，就让人类灭绝吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很早就想写一篇文章又不知道应该叫什么题目，所以就随便取了个题目。最近很忙，项目执行，项目验收，还有准备考试，总是被这些事情压的喘不过气来，觉得自己随时可能会崩溃，特别是上周一周熬了两个通宵，两天晚上工作超过凌晨。人处于真正忙碌
      
    
    </summary>
    
      <category term="随感" scheme="http://www.wuweiblog.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>未知</title>
    <link href="http://www.wuweiblog.com/2020/08/07/%E6%9C%AA%E7%9F%A5/"/>
    <id>http://www.wuweiblog.com/2020/08/07/未知/</id>
    <published>2020-08-07T09:07:33.000Z</published>
    <updated>2020-10-30T03:44:44.582Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;这两天跟领导出了趟差，回来得还挺早的。晚上大家在一起聊了会天，有了很多感触。总是有一种感觉，就是不知道自己应该朝哪个方向走才对。一直不喜欢被评价为智商高，活着情商高，我一直觉得这很世故，让人缺少了一些锐气。我更愿意被认为是一个很有原则的人，怎奈自己是一个讨好型人格，真的很难拒绝别人的要求。<br>&nbsp;&nbsp;&nbsp;&nbsp;梳理一下最近想要做的事情，包括项目执行，考试，论文准备，目前来说主要就是这三件事情，其中又以准备考试最为重要，其实一直都知道考试的重要性性，也一直都想着能够早日考过，可是意志力实在不是很够，东摸西摸浪费了很多时间导致复习得不是很好，心里没有什么底气。工作之后就一直很怀念读书的那段时光，那段时间可以很专注的学习，很专心的看论文，不管是效率还是精力都比现在要强很多。到现在，也不知道是因为年纪大了还是因为事情太多太杂导致精力无法集中，总是要给自己不断强调，不断强调才能有一点点的动力，总是忍不住诱惑，刷新闻，段视频这种短暂的快乐和放松总是会占用自己大量的时间，耐心越来越差。<br>&nbsp;&nbsp;&nbsp;&nbsp;我知道也许我们是有些小聪明，但是缺少大毅力和大智慧，领导让我多想，我觉得自己也确实应该多想，应该多反思，实际上被人评价为聪明并不是多么好的一件事情，这个世界似乎也不缺少聪明人，相比而言我更愿意做一个有毅力的人。突然想起一个故事，说的是我们小时候看到的那些成语，我们总是以为自己懂了，这个世界上怎么会有买椟还珠的人，怎么会有刻舟求剑的人，怎么会有掩耳盗铃的人，实际上明明知道这些故事的我们又何尝不是在做着买椟还珠、掩耳盗铃的故事呢。<br>&nbsp;&nbsp;&nbsp;&nbsp;一直以来家庭的教育与视野让我很难面对未知放手一搏，所以我总是选择那条最能看清的路，我不知道这样到底好不好，或者说其实未知的路没有人能够看清，不过不管怎么样我们不能以小聪明来欺骗生活，我想我应该去学习大智慧，去磨练自己的意志，增强自己的专注力，增强自己的，小聪明或许能够抄的了一时的近路，但是靠着这些是不可能赢得生活的，希望自己加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;这两天跟领导出了趟差，回来得还挺早的。晚上大家在一起聊了会天，有了很多感触。总是有一种感觉，就是不知道自己应该朝哪个方向走才对。一直不喜欢被评价为智商高，活着情商高，我一直觉得这很世故，让人缺少了一些锐气。我更愿意被认为是一个
      
    
    </summary>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>多想</title>
    <link href="http://www.wuweiblog.com/2020/07/14/%E5%A4%9A%E6%83%B3/"/>
    <id>http://www.wuweiblog.com/2020/07/14/多想/</id>
    <published>2020-07-14T11:09:00.000Z</published>
    <updated>2020-10-30T03:44:44.411Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;很久很久没有写点东西了，最近感觉有点颓废，家里装修的事情也是一拖再拖，到现在终于告一段落了，剩下的事情既不紧急也不重要。这2020年以可能对我来说是一个意义比较重大的年份吧，突然之间连升两级，其实自己有些措手不及的。有时候我在想，我们活在这个世界上的意义究竟是什么，名利钱财？这些东西似乎很重要，但是又似乎没有这么重要，实际上我觉得可能除了生死别的都没有多么重要吧。而活下去总是要给自己找个活下去的理由，那能不能没有理由的活下去呢？就找个工作，挣着一份工资，做着不是多么喜欢也谈不上讨厌的工作，每天似乎都很忙碌，有似乎什么都没有干，就这样混日子，然后一天天的老去到死亡？<br>&nbsp;&nbsp;&nbsp;&nbsp;最近看了很多谈论什么结婚率，生育率的问题，好像这是一个多么大的问题，但是我觉得其实这并不是什么问题，从宏观的角度来说，生育后代是为了人类基因的传递，这个理因是刻在我们基因中的需求，所以动物会发情，人会有性欲，这些欲望是如此强大以至于有时候能够完全盖过我们的理智。但是人毕竟不是动物，实际上我们可能错误的估计了理智思考对我们兽性基因的影响。人类毕竟比大多数动物更能够对自己有清醒的认识，理智和思考让我们学会了比较与度量，所以我们成功进化了，进化到我们的生活，生存不仅仅是对生理需求的满足，总还是想着要追求一些超脱于生理需求之外的东西，有的人把它称之为宗教，有的人叫做信仰，有的人叫理想。不管被称为什么，总之它对我们是有意义的，我们需要知道未来向哪个方向，而不是每天浑浑噩噩的生活，到死也不知道自己这一生究竟做了什么。<br>&nbsp;&nbsp;&nbsp;&nbsp;最近外婆去世了，很悲惨，又不是那么悲惨的去世了，我想每个人都会死的，外婆会去世，父母也会，自己也毫无疑问会去世，基于这样的思考，我对我爸妈表示出了极大的不理解，如果我们最终结果都是死亡，以什么样的形式死掉有什么区别呢？我想赌王在日散千金的ICU中死去和我外婆躺在床上死去好像也没有什么区别，盛大而隆重的葬礼似乎和简单热闹的葬礼也并不能改变什么，该死的还是要死不是么？所以我这一段时间总是在想死亡的问题，如果我注定是要死的，家庭、事业、爱情，这些东西好像都算不得什么，别人的看法，眼光好像也算得不什么，一帆风顺也并不能让你多活哪怕一秒钟，遭受世人的非议好像也无法让你少活一秒，这个是科技给我们带来的信心。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果真的是这个样子那我们活在这个世界上想要遵循的原则到底是什么？我们生活的终极意义和目标在哪？终极意义就是满足我们兽性的欲望，或者说终极意义就是完全克制我们兽性的欲望？克制对食物，对性，对好奇，对被尊重的欲望。马斯洛的生存需求金字塔说我们需要被尊重，实际上我们可能不一定需要被尊重，我们可以“无缘”的活在这个世界，在法律的框架下，不与人产生交集，也就无所谓尊重或是鄙夷，他人的尊重我们不在乎，他人的鄙夷我们也不在乎，我们可以不婚、不育、不老，可能大家觉得不老这件事情好像不可思议，实际上也没有什么不可思议的，不老去只死去也就可以了，我们为什么要在乎这些呢？难道我们一出生就有了要买房子，要结婚生子的想法？这些难道不是这个世界给我们灌输的么？其实仔细想想我们可能并不在意是么？ 所以得多想，再多想，我们内心本质的需求到底是什么？什么是我们能够放弃的？我也许会渐渐想明白，也可能想不明白。如果我能够连自己的生命都能够放弃，那我们需要坚守的是什么？以前开过一个玩笑，同事说死不可怕，任务完不成才可怕，我说死都不怕还怕任务完不成，然后我们就哈哈哈哈起来。实际上至少对于我来说还没有什么是我坚信自己即使放弃生命也要坚守的东西，所以也许当我接受死亡的时候就真的不需要有任何顾虑了。可是说来也好笑，我对死亡的看法真的只有痛感而已了，可能我什么时候能够接受疼痛，也就能够接受死亡了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很久很久没有写点东西了，最近感觉有点颓废，家里装修的事情也是一拖再拖，到现在终于告一段落了，剩下的事情既不紧急也不重要。这2020年以可能对我来说是一个意义比较重大的年份吧，突然之间连升两级，其实自己有些措手不及的。有时候我在
      
    
    </summary>
    
      <category term="随感" scheme="http://www.wuweiblog.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>我的旧吉他</title>
    <link href="http://www.wuweiblog.com/2020/03/23/%E6%88%91%E7%9A%84%E6%97%A7%E5%90%89%E4%BB%96/"/>
    <id>http://www.wuweiblog.com/2020/03/23/我的旧吉他/</id>
    <published>2020-03-23T15:28:53.000Z</published>
    <updated>2020-10-30T03:44:44.503Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;时隔很久之后又开始弹琴了，不得不说弹琴这件事情可能是我在大学中所学习到的最有用的技能之一了，在这里不得不提一下我的旧琴了。一把鸽子的合板琴，虽然是合板但是琴的音色很好，高音明亮低音浑厚，美中不足的是低音部分略显低沉，不过对我来说已经是一把足够好的琴了。高考完之后家里给买了一把琴，那把琴才260块钱，一把弦距极高的琴，目测12品弦距可能接近10mm，当时不懂琴反正都是家里买的，还免费赠送了十节课。进了大一的时候一直都是拿着那根烧火棍在弹，现在看起来那把琴可以说是反人类了，不过当时的我们弹得很开心，而且那个时候我们练琴练的十分投入，从两个完全没有基础的小白到初窥吉他门径，我们花了很多时间和精力，每天中午在楼顶上练琴，记得我们当时练的第一首指弹的曲子就是天空之城，当时谱子都看不太懂，华彩的标记看不懂，只能自己一点点满满摸索，连续练了一个月，终于能够比较顺畅的弹下来了。我们那个时候特别开心，手指上的茧起了又磨破了，然后又起了茧，这样一层一层，知道手指头上都是硬硬的死皮。<br>&nbsp;&nbsp;&nbsp;&nbsp;不记得是大一下还是进大二的时候，再人家的店里第一次摸我现在这把琴，当时手感和音色让我感到震撼，这么好的共振效果，这么低的弦距，这么舒适的手感，我想买下这把琴，但是自己当时真的没有钱，这把琴当时标价1200，在我们软磨硬泡之下降到了800，可是800当时对我来说也是一笔巨款，当时我生活费每个月就六七百块，家里一次性给了我一个学期的生活费，我咬牙买下了它，然后半个学期过着贫穷的生活，半个学期不敢怎么出去聚餐，不敢出去玩，然后我跟我的宝贝吉他相依为命快十年了，后来也试了不少好琴，也想着换一把全单的琴。到了工作之后，稍微有一点钱了，其实很想换把琴，但是还是不舍得换，并不是不舍得钱，而是不舍得我的这把旧吉他放在家里吃灰，然后慢慢变成一个烧火棍。在这快十年间经历了很多事情，有时候练琴练的很多，有时候很久不弹。有时候高兴的时候弹，有时候难过的时候弹，这把就吉他见证了我这十年来的喜怒哀乐，或者它对于我来说不仅是一把琴，或许有了更深刻的含义。<br>&nbsp;&nbsp;&nbsp;&nbsp;我一直坚信即使我一无所有，我也不会把它卖掉，当然也并不是什么名贵的琴，也卖不了什么钱，但是它对我的意义很大，它见证了我的成长。我觉得每个人都应该学习一门乐器，每个人都应该学些音乐，有很多时候其实你会发现你真的一无所有，除了你的乐器陪伴着你，他们能感受你的情绪，他们能体会你的愤怒，你的悲伤，还有快乐，他们就安静的躺在那里，在你需要的时候就可以给你陪伴，让你感到温暖，我的旧吉他不是什么名贵的吉他，可是它对我来说却是无可替代的，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;时隔很久之后又开始弹琴了，不得不说弹琴这件事情可能是我在大学中所学习到的最有用的技能之一了，在这里不得不提一下我的旧琴了。一把鸽子的合板琴，虽然是合板但是琴的音色很好，高音明亮低音浑厚，美中不足的是低音部分略显低沉，不过对我来
      
    
    </summary>
    
      <category term="随感" scheme="http://www.wuweiblog.com/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
      <category term="随感" scheme="http://www.wuweiblog.com/tags/%E9%9A%8F%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>关于openSFM代码学习</title>
    <link href="http://www.wuweiblog.com/2020/03/22/%E5%85%B3%E4%BA%8EopenSFM%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.wuweiblog.com/2020/03/22/关于openSFM的学习/</id>
    <published>2020-03-22T13:09:55.000Z</published>
    <updated>2020-10-30T03:44:44.338Z</updated>
    
    <content type="html"><![CDATA[<p>一直在找和学习关于SFM的资料和代码，从刚开始的bundler到后来的ceres-sovler然后再到上层的应用openMVG+openMVS再到现在的openSFM，通过对这些的学习，对于SFM的基本知识我自认为已经是掌握得差不多了，最近在对openSFM的学习过程中同时对openSFM又有了一些改造，下面我详细的对自己的学习过程进行一个介绍，同时也对openSFM进行一个入门性质的介绍：<br>首先我先介绍一下关于openSFM的<a href="https://opensfm.readthedocs.io/en/latest/" target="_blank" rel="noopener">编译</a>实际上在官网中介绍得比较详细了，下面我进行一个简单的介绍，openSFM是一个依赖于部分C++库的由python编写的SFM代码，所以它既具有较高的效率，同时也能够方便的进行接口的扩展和使用：</p><h2 id="安装与编译"><a href="#安装与编译" class="headerlink" title="安装与编译"></a>安装与编译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone --recursive https://github.com/mapillary/OpenSfM</span><br><span class="line">如果在clone的时候没有添加recursive参数，则后续可以通过如下处理</span><br><span class="line"></span><br><span class="line">cd OpenSfM</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>openSFM依赖库包括：openCV，openGV，Ceres Solver以及Numpy，SciPy，Networkx, PyYAML, exifread其他的依赖库都没有什么好说的，主要说一下关于openGV的库，我选择的是ubuntu18.04 python3下安装，首先下载openGV的库，然后有一个很重要的步骤就是这是python安装录的设置，主要代码为：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mkdir -p /source &amp;&amp; cd /source &amp;&amp; \</span><br><span class="line">git clone https://github.com/paulinus/opengv.git &amp;&amp; \</span><br><span class="line">cd /source/opengv &amp;&amp; \</span><br><span class="line">git submodule update --init --recursive &amp;&amp; \</span><br><span class="line">mkdir -p build &amp;&amp; cd build &amp;&amp; \</span><br><span class="line">cmake .. -DBUILD_TESTS=<span class="keyword">OFF</span> \</span><br><span class="line">         -DBUILD_PYTHON=<span class="keyword">ON</span> \</span><br><span class="line">         -DPYBIND11_PYTHON_VERSION=<span class="number">3.6</span> \</span><br><span class="line">         -DPYTHON_INSTALL_DIR=/usr/local/lib/python3.<span class="number">6</span>/dist-packages/ \</span><br><span class="line">         &amp;&amp; \</span><br><span class="line">make <span class="keyword">install</span> &amp;&amp; \</span><br><span class="line">cd / &amp;&amp; rm -rf /source/opengv</span><br></pre></td></tr></table></figure></p><p>以上参数：-DPYTHON_INSTALL_DIR主要目的在于设置python库的路径，这个根据自己的python安装库来进行设置，此外可能存在问题的部分在ceres solver的安装，一般给的地址都是google的地址，如果没有梯子无法clone下来，其实在github上也有副本，可以从github上clone下来然后编译，完成依赖库的安装后只需要<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pythonX setup.py build</span><br></pre></td></tr></table></figure></p><p>其中X为自己安装python 的版本号。</p><h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>完成安装后在bin目录下就会出现opensfm和opensfm_run_all文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">DIR=$( <span class="built_in">cd</span> <span class="string">"<span class="variable">$( dirname "$&#123;BASH_SOURCE[0]&#125;" )</span>"</span> &amp;&amp; <span class="built_in">pwd</span> )</span><br><span class="line">PYTHON=<span class="variable">$&#123;2:-python3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Running using Python command: <span class="variable">$PYTHON</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm extract_metadata <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm detect_features <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm match_features <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm create_tracks <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm reconstruct <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm mesh <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm undistort <span class="variable">$1</span></span><br><span class="line"><span class="variable">$PYTHON</span> <span class="variable">$DIR</span>/opensfm compute_depthmaps <span class="variable">$1</span></span><br></pre></td></tr></table></figure></p><p>从以上的文件中我们可以看到处理顺序，通过python bin/opensfm comman parameters来运行，首先解析元数据，然后检测特征点，特征点匹配，查找连接点，光束法平差计算，计算mesh，影像核线校正，然后计算深度图，实际上如果不做密集匹配后面三个步骤就不需要了，而而输入的参数实际上就是影像路径，影像文件夹中应该将影像放在images文件夹下，在解析过程中会自动查找images文件夹，找到文件夹下所有影像进行处理。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>python的代码相对简单，在这里我只针对核心代码进行分析，首先是</p><ul><li>config.py文件，这个文件设置了所有默认参数，在测试数据集中我们可以看到有一个config.yaml文件，实际上这个文件就是设置参数文件，实际上不是所有参数都需要设置，如果没有设置参数，则参数选取config.py中设置的默认参数进行处理，所以这个文件十分重要；</li><li>dataset.py文件，这个文件是对数据集的定义文件，文件包含了所有文件的读取，保存构建影像列表等信息，因此如果需要对源码进行分析可以从输出文件往前分析；</li></ul><p>其他的文件主要是功能性文件，具体代码实际上比较简单，在这里我就不再进行更加详细的介绍，如果有兴趣的话可以一起讨论关于openSFM的问题：<a href="mailto:wuwei_cug@163.com" target="_blank" rel="noopener">wuwei_cug@163.com</a></p><h2 id="输出文件分析"><a href="#输出文件分析" class="headerlink" title="输出文件分析"></a>输出文件分析</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">reconstruction.json: [RECONSTRUCTION, ...]</span><br><span class="line"></span><br><span class="line">RECONSTRUCTION: &#123;</span><br><span class="line">    "cameras": &#123;</span><br><span class="line">        CAMERA_ID: CAMERA,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    "shots": &#123;</span><br><span class="line">        SHOT_ID: SHOT,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    "points": &#123;</span><br><span class="line">        POINT_ID: POINT,</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CAMERA: &#123;</span><br><span class="line">    "projection_type": "perspective",  # Can be perspective, brown, fisheye or equirectangular</span><br><span class="line">    "width": NUMBER,                   # Image width in pixels</span><br><span class="line">    "height": NUMBER,                  # Image height in pixels</span><br><span class="line"></span><br><span class="line">    # Depending on the projection type more parameters are stored.</span><br><span class="line">    # These are the parameters of the perspective camera.</span><br><span class="line">    "focal": NUMBER,                   # Estimated focal length</span><br><span class="line">    "k1": NUMBER,                      # Estimated distortion coefficient</span><br><span class="line">    "k2": NUMBER,                      # Estimated distortion coefficient</span><br><span class="line">    "focal_prior": NUMBER,             # Initial focal length</span><br><span class="line">    "k1_prior": NUMBER,                # Initial distortion coefficient</span><br><span class="line">    "k2_prior": NUMBER                 # Initial distortion coefficient</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SHOT: &#123;</span><br><span class="line">    "camera": CAMERA_ID,</span><br><span class="line">    "rotation": [X, Y, Z],      # Estimated rotation as an angle-axis vector</span><br><span class="line">    "translation": [X, Y, Z],   # Estimated translation</span><br><span class="line">    "gps_position": [X, Y, Z],  # GPS coordinates in the reconstruction reference frame</span><br><span class="line">    "gps_dop": METERS,          # GPS accuracy in meters</span><br><span class="line">    "orientation": NUMBER,      # EXIF orientation tag (can be 1, 3, 6 or 8)</span><br><span class="line">    "capture_time": SECONDS     # Capture time as a UNIX timestamp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POINT: &#123;</span><br><span class="line">    "coordinates": [X, Y, Z],      # Estimated position of the point</span><br><span class="line">    "color": [R, G, B],            # Color of the point</span><br><span class="line">    "reprojection_error": NUMBER   # Average reprojection error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是<a href="https://opensfm.readthedocs.io/en/latest/dataset.html#reconstruction-file-format" target="_blank" rel="noopener">官网</a>关于renconstruction的解释，如果影像中包含经纬度信息还有reference_ll等中心经纬度信息，实际上shot就是影像，shot_id实际上就是影像名，<strong>POINT实际上就是通过连接点计算得到的三维点信息，而POINT的id实际上就是trackID，据此可以时间track中影像坐标与POINT的三维点坐标进行匹配；</strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一直在找和学习关于SFM的资料和代码，从刚开始的bundler到后来的ceres-sovler然后再到上层的应用openMVG+openMVS再到现在的openSFM，通过对这些的学习，对于SFM的基本知识我自认为已经是掌握得差不多了，最近在对openSFM的学习过程中同时
      
    
    </summary>
    
      <category term="学习" scheme="http://www.wuweiblog.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="图像处理" scheme="http://www.wuweiblog.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-三十一弹</title>
    <link href="http://www.wuweiblog.com/2020/03/22/tensorflow-%E4%B8%89%E5%8D%81%E4%B8%80%E5%BC%B9/"/>
    <id>http://www.wuweiblog.com/2020/03/22/tensorflow-三十一弹/</id>
    <published>2020-03-22T02:55:25.000Z</published>
    <updated>2020-10-30T03:44:44.050Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;前一段时间熟悉了一下tensorflow2.0以及kersa，然后通过mnist数据集构建了一个简单的深度网络进行了学习，基于上一弹的基础我们来进行一些更加深入的学习，数据集同样是采用mnist数据集，我们来训练一个GAN网络，首先我们对GAN的原理进行分析：</p><h2 id="GAN原理分析"><a href="#GAN原理分析" class="headerlink" title="GAN原理分析"></a>GAN原理分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;GAN, Generative Adversarial Networks又被称为生成对抗网络<a href="#refer-anchor-1"><sup>1</sup></a>，在这个网络模型中至少需要两个部分，分别成为生成器和识别器，其中生成器主要作用在于根据一个随机输入生成需要生成的对象，识别器可以i认为就是一个简单的神经网络，对生成器生成的数据进行识别。在此过程中需要明确的是代价函数，针对生成器和识别器我们都需要指定代价函数，具体的函数形式我们后续再讨论，首先我们先讨论一下生成器与识别器的模式。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;实际上生成器可以简单的理解为一个分布函数，只是这个分布函数的参数是一个深度神经网络，根据一个输入以及目标label得到一个确定的输出，具体代码为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acgan_generator</span><span class="params">()</span>:</span></span><br><span class="line">    model = Sequential()</span><br><span class="line"></span><br><span class="line">    model.add(layers.Dense(<span class="number">128</span> * <span class="number">7</span> * <span class="number">7</span>, activation=<span class="string">"relu"</span>, input_dim=<span class="number">100</span>))</span><br><span class="line">    model.add(layers.Reshape((<span class="number">7</span>, <span class="number">7</span>, <span class="number">128</span>)))</span><br><span class="line">    model.add(layers.BatchNormalization(momentum=<span class="number">0.8</span>))</span><br><span class="line">    model.add(layers.UpSampling2D())</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.Activation(<span class="string">"relu"</span>))</span><br><span class="line">    model.add(layers.BatchNormalization(momentum=<span class="number">0.8</span>))</span><br><span class="line">    model.add(layers.UpSampling2D())</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.Activation(<span class="string">"relu"</span>))</span><br><span class="line">    model.add(layers.BatchNormalization(momentum=<span class="number">0.8</span>))</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">1</span>, kernel_size=<span class="number">3</span>, padding=<span class="string">'same'</span>))</span><br><span class="line">    model.add(layers.Activation(<span class="string">"tanh"</span>))</span><br><span class="line"></span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    noise = layers.Input(shape=(<span class="number">100</span>,))</span><br><span class="line">    label = layers.Input(shape=(<span class="number">1</span>,), dtype=<span class="string">'int32'</span>)</span><br><span class="line">    label_embedding = layers.Flatten()(layers.Embedding(<span class="number">10</span>, <span class="number">100</span>)(label))</span><br><span class="line"></span><br><span class="line">    model_input = layers.multiply([noise, label_embedding])</span><br><span class="line">    img = model(model_input)</span><br><span class="line">    <span class="comment">#将模型输出</span></span><br><span class="line">    keras.utils.plot_model(model, to_file=<span class="string">'./data/2_Generator.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.keras.Model([noise, label], img)</span><br></pre></td></tr></table></figure></p><p>这个生成器的结构为：<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/2_Generator.png" alt="生成器"><br>为了简单起见我们结合代码与程序结构同时进行分析，首先我们的生成器是一个随机的输入向量，这个向量是一个100维的随机向量，同时输入一个label值，通过label值来标识需要模拟哪个数值（mnist只有10个值），这个100维向量通过神经网络转换维128<em>7</em>7的向量，步骤包括：</p><ul><li>向量转换为二维-&gt;归一化-&gt;向上采样维128<em>（14</em>14）的向量-&gt;卷积操作-&gt;激活函数-&gt;归一化-&gt;向上采样维64<em>（28</em>28）的向量-&gt;卷积操作-&gt;激活函数-&gt;归一化为1&amp;（27*28）的向量-&gt;卷积操作-&gt;激活函数</li></ul><p>最后得到一个生成的28<em>28的手写数字以及输入的待识别的标识，函数最后将构建的模型输出，实际上生成器就完成了，简单的说就是根据一个随机的输入值构建了一个生成28</em>28大小的影像。</p><h3 id="识别器"><a href="#识别器" class="headerlink" title="识别器"></a>识别器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;实际上识别器的主要作用在于识别图像是否由生成器生成，在我们这个目标中识别器的作用是识别通过生成器生成的手写数字是否为对应的数字，识别器的具体代码为：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">acgan_discriminator</span><span class="params">()</span>:</span></span><br><span class="line">    model = Sequential()</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">16</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">2</span>, input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>), padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.LeakyReLU(alpha=<span class="number">0.2</span>))</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.25</span>))</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">32</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">2</span>, padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.ZeroPadding2D(padding=((<span class="number">0</span>,<span class="number">1</span>),(<span class="number">0</span>,<span class="number">1</span>))))</span><br><span class="line">    model.add(layers.LeakyReLU(alpha=<span class="number">0.2</span>))</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.25</span>))</span><br><span class="line">    model.add(layers.BatchNormalization(momentum=<span class="number">0.8</span>))</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">64</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">2</span>, padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.LeakyReLU(alpha=<span class="number">0.2</span>))</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.25</span>))</span><br><span class="line">    model.add(layers.BatchNormalization(momentum=<span class="number">0.8</span>))</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">128</span>, kernel_size=<span class="number">3</span>, strides=<span class="number">1</span>, padding=<span class="string">"same"</span>))</span><br><span class="line">    model.add(layers.LeakyReLU(alpha=<span class="number">0.2</span>))</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.25</span>))</span><br><span class="line"></span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.summary()</span><br><span class="line"></span><br><span class="line">    img = layers.Input(shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Extract feature representation</span></span><br><span class="line">    features = model(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Determine validity and label of the image</span></span><br><span class="line">    validity = layers.Dense(<span class="number">1</span>, activation=<span class="string">"sigmoid"</span>)(features)</span><br><span class="line">    label = layers.Dense(<span class="number">10</span>, activation=<span class="string">"softmax"</span>)(features)</span><br><span class="line">    </span><br><span class="line">    keras.utils.plot_model(model, to_file=<span class="string">'./data/2_Discriminator.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">    <span class="keyword">return</span> tf.keras.Model(img, [validity, label])</span><br></pre></td></tr></table></figure></p><p><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/2_Discriminator.png" alt="识别器"><br>识别器可以简单的理解为是一个识别输入的图像是否为对应数组的一个深度网络，其输入是影像，输出是数字的10维向量，对于识别器的识别过程，在以前就多此提到过，在这里没有必要再多提了，通过识别器可以对生成器生成的结果进行识别给出判断结果对生成器进行优化，同时识别器不仅要识别数字结果还需要识别validity，这个标识的主要作用在于标识输入的参数是由生成器提供还是真实数据。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(epochs, batch_size=<span class="number">128</span>, sample_interval=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="comment"># Build and compile the discriminator</span></span><br><span class="line">    optimizer = Adam(<span class="number">0.0002</span>, <span class="number">0.5</span>)</span><br><span class="line">    losses = [<span class="string">'binary_crossentropy'</span>, <span class="string">'sparse_categorical_crossentropy'</span>]</span><br><span class="line">    discriminator = acgan_discriminator()</span><br><span class="line">    discriminator.compile(loss=losses,</span><br><span class="line">        optimizer=optimizer,</span><br><span class="line">        metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Build the generator</span></span><br><span class="line">    </span><br><span class="line">    generator = acgan_generator()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The generator takes noise and the target label as input</span></span><br><span class="line">    <span class="comment"># and generates the corresponding digit of that label</span></span><br><span class="line">    noise = layers.Input(shape=(<span class="number">100</span>,))</span><br><span class="line">    label = layers.Input(shape=(<span class="number">1</span>,))</span><br><span class="line">    img = generator([noise, label])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># For the combined model we will only train the generator</span></span><br><span class="line">    discriminator.trainable = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># The discriminator takes generated image as input and determines validity</span></span><br><span class="line">    <span class="comment"># and the label of that image</span></span><br><span class="line">    valid, target_label = discriminator(img)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># The combined model  (stacked generator and discriminator)</span></span><br><span class="line">    <span class="comment"># Trains the generator to fool the discriminator</span></span><br><span class="line">    combined = tf.keras.Model([noise, label], [valid, target_label])</span><br><span class="line">    combined.compile(loss=losses,optimizer=optimizer)</span><br><span class="line">    keras.utils.plot_model(combined, to_file=<span class="string">'./data/2_Combined.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load the dataset</span></span><br><span class="line">    (X_train, y_train), (_, _) = load_mnist_data()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Configure inputs</span></span><br><span class="line">    X_train = (X_train.astype(np.float32) - <span class="number">127.5</span>) / <span class="number">127.5</span></span><br><span class="line">    X_train = np.expand_dims(X_train, axis=<span class="number">3</span>)</span><br><span class="line">    y_train = y_train.reshape(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Adversarial ground truths</span></span><br><span class="line">    valid = np.ones((batch_size, <span class="number">1</span>))</span><br><span class="line">    fake = np.zeros((batch_size, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line">        <span class="comment">#  Train Discriminator</span></span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Select a random batch of images</span></span><br><span class="line">        idx = np.random.randint(<span class="number">0</span>, X_train.shape[<span class="number">0</span>], batch_size)</span><br><span class="line">        imgs = X_train[idx]</span><br><span class="line">        <span class="comment"># Image labels. 0-9 </span></span><br><span class="line">        img_labels = y_train[idx]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Sample noise as generator input</span></span><br><span class="line">        noise = np.random.normal(<span class="number">0</span>, <span class="number">1</span>, (batch_size, <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># The labels of the digits that the generator tries to create an</span></span><br><span class="line">        <span class="comment"># image representation of</span></span><br><span class="line">        sampled_labels = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (batch_size, <span class="number">1</span>))</span><br><span class="line">        <span class="comment"># Generate a half batch of new images</span></span><br><span class="line">        gen_imgs = generator.predict([noise, sampled_labels])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Train the discriminator</span></span><br><span class="line">        d_loss_real = discriminator.train_on_batch(imgs, [valid, img_labels])</span><br><span class="line">        d_loss_fake = discriminator.train_on_batch(gen_imgs, [fake, sampled_labels])</span><br><span class="line">        d_loss = <span class="number">0.5</span> * np.add(d_loss_real, d_loss_fake)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line">        <span class="comment">#  Train Generator</span></span><br><span class="line">        <span class="comment"># ---------------------</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Train the generator</span></span><br><span class="line">        g_loss = combined.train_on_batch([noise, sampled_labels], [valid, sampled_labels])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot the progress</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"%d [D loss: %f, acc.: %.2f%%, op_acc: %.2f%%] [G loss: %f]"</span> % (epoch, d_loss[<span class="number">0</span>], <span class="number">100</span>*d_loss[<span class="number">3</span>], <span class="number">100</span>*d_loss[<span class="number">4</span>], g_loss[<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># If at save interval =&gt; save generated image samples</span></span><br><span class="line">        <span class="keyword">if</span> epoch % sample_interval == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#save_model(generator,discriminator)</span></span><br><span class="line">            sample_images(epoch,generator)</span><br><span class="line">    save_model(generator,discriminator)</span><br></pre></td></tr></table></figure><p>代码也不是很难，主要过程在于训练的过程，在训练的过程中我们通过真实数据与fake数据的交替训练对生成器和识别器进行训练，识别器需要识别的结<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d_loss_real = discriminator.train_on_batch(imgs, [valid, img_labels])</span><br><span class="line">d_loss_fake = discriminator.train_on_batch(gen_imgs, [fake, sampled_labels])</span><br><span class="line">d_loss = <span class="number">0.5</span> * np.add(d_loss_real, d_loss_fake)</span><br></pre></td></tr></table></figure></p><p>以上代码就是识别器识别的过程，实际上我们识别器需要保证识别的label和vaild同时准确才行，所以识别的损失函数为识别真实数据的损失函数与生成器生成数据的损失函数；在完成识别器训练后就需要对生成器进行训练，对生成器的训练过程实际上损失函数就是输入的noise以及需要识别的数字，然后通过识别器能够识别出是是否是生成器生成的数据以及是否为给定的数值，据此对生成器进行训练，通过交替训练识别器与生成器达到最后生成器能够进行最好的识别的效果。</p><h3 id="结果与讨论"><a href="#结果与讨论" class="headerlink" title="结果与讨论"></a>结果与讨论</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;通过以上过程可以得到一个稳定的生成器与识别器，实际上GAN最大的作用还是在于训练生成器，使得生成器生成的数据能够最佳拟合真实数据，达到模拟仿真的目的。同时GAN也被广泛的应用于图像修复，图像生成，音乐生成，围棋<a href="&quot;refer-anchor-2&quot;"><sup>2</sup></a><a href="&quot;refer-anchor-3&quot;"><sup>3</sup></a><a href="&quot;refer-anchor-4&quot;"><sup>4</sup></a>等领域，实际上GAN的出现使得计算器自学习能力向前迈进了一大步，下面展示通过GAN训练的手写数字模拟的效果：<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/2_GANResult.png" alt="GAN模拟手写数据结果"><br>上图为模拟的结果，模拟的数字为1，文件名为迭代的次数，每次迭代的batch大小为100，可以看出迭代次数小的时候模拟结果比较差，当迭代次数增加，生成器效果慢慢编号，最后随着迭代次数的增加，生成器生成的数据已经能够很好的模拟手写数字的真实数据了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><div id="refer-anchor-1"></div></p><ul><li>[1] Goodfellow, I. J., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D.,<br>Ozair, S., Courville, A., and Bengio, Y. (2014b). Generative adversarial networks. In NIPS’2014 .<div id="refer-anchor-2"></div></li><li>[2] Yijun Li, Sifei Liu, Jimei Yang,et.al. Generative Face Completion[C]// IEEE Conference on Computer Vision &amp; Pattern Recognition. IEEE, 2017.<div id="refer-anchor-3"></div></li><li>[3] Jean-Marc Valin, Jan Skoglund. LPCNET: Improving Neural Speech Synthesis through Linear Prediction[C]// Icassp IEEE International Conference on Acoustics. IEEE, 2019.<div id="refer-anchor-4"></div></li><li>[4] Jim X. Chen. The Evolution of Computing: AlphaGo[J]. Computing in Science &amp; Engineering, 2016, 18(4):4-7.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;前一段时间熟悉了一下tensorflow2.0以及kersa，然后通过mnist数据集构建了一个简单的深度网络进行了学习，基于上一弹的基础我们来进行一些更加深入的学习，数据集同样是采用mnist数据集，我们来训练一个GAN网络
      
    
    </summary>
    
      <category term="学习" scheme="http://www.wuweiblog.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow学习" scheme="http://www.wuweiblog.com/tags/tensorflow%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-三十弹</title>
    <link href="http://www.wuweiblog.com/2020/03/03/tensorflow-%E4%B8%89%E5%8D%81%E5%BC%B9/"/>
    <id>http://www.wuweiblog.com/2020/03/03/tensorflow-三十弹/</id>
    <published>2020-03-03T01:06:38.000Z</published>
    <updated>2020-10-30T03:44:44.056Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;在上一部分中我们只描述了深度学习的一些基本问题，如梯度消失，激活函数等问题，剩下两个部分，分别为tensorflow2.x的使用以及关于GAN的一些知识与实践，首先介绍一下关于tensorflow2.x 以及其集成的kersa的知识，以前的时候写神经网络总是通过tensorflow原生直接写，虽然也提供了自动求导方式，但是实践起来总是有点麻烦，而使用kersa之后感觉惊为天人，网络的构建过程得到了极大的简化，使得构建深度学习模型变成了一个工程问题而非科学问题了。<br>&nbsp;&nbsp;&nbsp;&nbsp;下面我们首先介绍一下<strong>tensorflow2.0</strong>，首先安装过程，目前来说tensorflow2.0的安装不支持python3.7，我在python3.6 ubuntu18.04 LST版本下安装，我本机系统式win10，采用WSL的方式安装了linux的控制台环境，反正目前也不需要图形化环境，所以采用此种方式最为简单方便，安装在linux下安装tensorflow2.0的环境相对还是比较简单，在连接网络的条件下<a href="https://zhuanlan.zhihu.com/p/61472293" target="_blank" rel="noopener">参考</a>进行就可以了。安装完成之后我们就可以开始进行tensorflow代码的编写了，原生的tensorflow代码实际上区别不大，我们主要介绍一下关于kersa代码的一些特点：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">model = tf.keras.Sequential()</span><br><span class="line">model.add(layers.Conv2D(<span class="number">8</span>,(<span class="number">5</span>,<span class="number">5</span>), activation=<span class="string">'relu'</span>,input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)))</span><br><span class="line">model.add(layers.Conv2D(<span class="number">16</span>,(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">'relu'</span>,input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)))</span><br><span class="line">model.add(layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>))<span class="comment">#784向量映射到128</span></span><br><span class="line">model.add(layers.Dropout(<span class="number">0.2</span>))  <span class="comment">#dropout trick 避免模型过于依赖某些神经元避免在分类过程中</span></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">                metrics=[<span class="string">'accuracy'</span>])</span><br></pre></td></tr></table></figure></p><p>以上代码构建了一个简单的深度神经网络的学习模型，从以上代码中有几个函数，我们进行详细说明：</p><ul><li>Sequential 构建一个序贯模型：序贯模型是相对于循环网络来说的，输入经过处理到输出，而不需要循环输入的网络模型就成为序贯模型；</li><li>Conv2D：卷积层，这个是CNN网络的典型结构，对网络做一个卷积操作，卷积层包括卷积核大小以及卷积特征数；</li><li>MaxPool2D：池化层，实际上池化操作在以前的部分也有，就是一个求池化核大小内的最大值的区别；</li><li>Flatten：压平，将一个n维向量转换为一维的过程；</li><li>Dense：全连接层</li><li>compile：实际上这个就是定义网络的目标函数，损失函数以及优化方法的定义，通过compile构成一个能够反向传播的网络，在compile之后就可以进行数据优化的训练过程了；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;从上面一小段代码可以看出，通过kersa将神经网简单的分成了几个部分，包括：数据准备（数据读取和数据格式转换），模型构建（根据数学原理和神经网络结构构建模型），模型训练。为了能够更加清楚的说明这个过程，编写了一个简单的网络模型作为参考：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">@Descripttion: tensorflow 2.0 kersa学习第一课</span></span><br><span class="line"><span class="string">@version: 1.0版本</span></span><br><span class="line"><span class="string">@Author: Frank.Wu</span></span><br><span class="line"><span class="string">@Date: 2020-02-26 09:50:02</span></span><br><span class="line"><span class="string">@LastEditors: Frank.Wu</span></span><br><span class="line"><span class="string">@LastEditTime: 2020-03-03 11:33:48</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#coding = utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers, optimizers, Sequential,datasets</span><br><span class="line"><span class="keyword">import</span>  os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(tf.__version__)</span><br><span class="line">print(tf.keras.__version__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(os.environ.keys())</span></span><br><span class="line"><span class="comment"># 设置后台打印日志等级 避免后台打印一些无用的信息</span></span><br><span class="line">os.environ[<span class="string">'TF_CPP_MIN_LOG_LEVEL'</span>] = <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="string">''' </span></span><br><span class="line"><span class="string">    加载mnist数据，判断本地是否有数据，</span></span><br><span class="line"><span class="string">    如果有则加载，否则加载在线数据</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mnist_data</span><span class="params">()</span>:</span></span><br><span class="line">    pathLocal = <span class="string">'./data/mnist/mnist.npz'</span></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(pathLocal)):</span><br><span class="line">        f = np.load(pathLocal)</span><br><span class="line">        x_train, y_train = f[<span class="string">'x_train'</span>], f[<span class="string">'y_train'</span>]</span><br><span class="line">        x_test, y_test = f[<span class="string">'x_test'</span>], f[<span class="string">'y_test'</span>]</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> (x_train, y_train), (x_test, y_test)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    构建模型:</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#1.mnist 全连接模型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_full_model</span><span class="params">()</span>:</span></span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)))<span class="comment">#将28*28 转换到一维</span></span><br><span class="line">    model.add(layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>))<span class="comment">#784向量映射到128</span></span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.2</span>))  <span class="comment">#dropout trick 避免模型过于依赖某些神经元避免在分类过程中</span></span><br><span class="line">    model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line">    model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                  loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">                  metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">    <span class="comment">#将模型输出</span></span><br><span class="line">    keras.utils.plot_model(model, to_file=<span class="string">'./data/1_model.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#plot(model, to_file='./data/1_model.png', show_shapes=True)</span></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_cnn_model</span><span class="params">()</span>:</span></span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">8</span>,(<span class="number">5</span>,<span class="number">5</span>), activation=<span class="string">'relu'</span>,input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)))</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">16</span>,(<span class="number">5</span>,<span class="number">5</span>),activation=<span class="string">'relu'</span>,input_shape=(<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>)))</span><br><span class="line">    model.add(layers.MaxPool2D(pool_size=(<span class="number">2</span>,<span class="number">2</span>)))</span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.add(layers.Dense(<span class="number">128</span>, activation=<span class="string">'relu'</span>))<span class="comment">#784向量映射到128</span></span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.2</span>))  <span class="comment">#dropout trick 避免模型过于依赖某些神经元避免在分类过程中</span></span><br><span class="line">    model.add(layers.Dense(<span class="number">10</span>, activation=<span class="string">'softmax'</span>))</span><br><span class="line">    model.compile(optimizer=<span class="string">'adam'</span>,</span><br><span class="line">                  loss=<span class="string">'sparse_categorical_crossentropy'</span>,</span><br><span class="line">                  metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line">    <span class="comment">#将模型输出</span></span><br><span class="line">    keras.utils.plot_model(model, to_file=<span class="string">'./data/1_model.png'</span>, show_shapes=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment">#plot(model, to_file='./data/1_model.png', show_shapes=True)</span></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"> </span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    通过数据进行训练</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#1.mnist 数据集进行训练</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_fit_evaluate</span><span class="params">(model,x_train,y_train,x_test,y_test)</span>:</span></span><br><span class="line">    model.fit(x_train, y_train,batch_size=<span class="number">64</span>, epochs=<span class="number">5</span>)</span><br><span class="line">    model.evaluate(x_test,  y_test, verbose=<span class="number">2</span>)</span><br><span class="line">    model.save(<span class="string">'./data/1_mnist.h5'</span>)</span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    全流程</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mnist_full</span><span class="params">()</span>:</span></span><br><span class="line">    pathModel = <span class="string">'./data/1_mnist.h5'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(os.path.exists(pathModel)):</span><br><span class="line">        model = keras.models.load_model(pathModel)</span><br><span class="line">        <span class="keyword">return</span> model</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        model = mnist_cnn_model()</span><br><span class="line">        (x_train, y_train), (x_test, y_test) = load_mnist_data()</span><br><span class="line">        x_train, x_test=x_train/<span class="number">255.0</span>, x_test/<span class="number">255.0</span></span><br><span class="line">        x_train = x_train.reshape(<span class="number">60000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">        x_test = x_test.reshape(<span class="number">10000</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line">        mnist_fit_evaluate(model,x_train,y_train,x_test,y_test)</span><br><span class="line">        <span class="keyword">return</span> model</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">mnist_full()</span><br></pre></td></tr></table></figure></p><p>以上代码数据采用的是mnist数据，因为提供的mnist数据加载比较慢，所以我们从网上下载了数据并对数据读取代码进行了略微的修改。数据读取完成后得到训练样本集和测试样本集，训练样本集模型层编写了两种模型，包括简单的神经网络模型以及深度神经网络模型，对两种模型进行了训练，并查看训练结果的准确性。另外keras还提供了将模型结构输出的函数，可以将模型结构保存为图片。如果大家有兴趣可以在tensorflow2.0环境下运行以上代码进行测试，以便进一步了解keras的数据模型。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在上一部分中我们只描述了深度学习的一些基本问题，如梯度消失，激活函数等问题，剩下两个部分，分别为tensorflow2.x的使用以及关于GAN的一些知识与实践，首先介绍一下关于tensorflow2.x 以及其集成的kersa
      
    
    </summary>
    
      <category term="学习" scheme="http://www.wuweiblog.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow学习" scheme="http://www.wuweiblog.com/tags/tensorflow%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow-第二十九弹</title>
    <link href="http://www.wuweiblog.com/2020/02/28/tensorflow-%E4%BA%8C%E5%8D%81%E4%B9%9D%E5%BC%B9/"/>
    <id>http://www.wuweiblog.com/2020/02/28/tensorflow-二十九弹/</id>
    <published>2020-02-28T06:14:07.000Z</published>
    <updated>2020-10-30T03:44:44.087Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;很久没有更新这个系列了，不知不觉tensorflow也更新到了2.x版，新版得tenforflow相比于1.x的版本，有着更快的训练速度，同时内部集成了keras使得网络的构建和训练变成了一件及其简单的事情，因此在构建网络上并没有什么可以细说的，剩下的工作我们会把代码的编写放在后一步，着重的说明各种网络的构建模式以及机器学习中的一些细节问题，以及导致这些问题的原因，由此更深入的了解如何通过机器学习对网络进行调优。<br>&nbsp;&nbsp;&nbsp;&nbsp;我打算花一下午的时间总结一下主要包括几个部分的问题：</p><ul><li>第一个就是激活函数的问题：激活函数的类型，为什么需要激活函数，以及如何判断激活函数的好坏；</li><li>第二个是keras的问题，这个工具以前没有用过，所以打算用一下，顺便介绍一下其特点；</li><li>第三个是关于GAN的问题，在GAN中有一个重要的问题是生成器与识别器如何联合调优的问题，这个需要仔细分析；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;首先我们来谈一下什么是激活函数：<a href="https://baike.baidu.com/item/%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0/2520792?fr=aladdin" target="_blank" rel="noopener">在神经元中，输入的 inputs 通过加权，求和后，还被作用了一个函数，这个函数就是激活函数。引入激活函数是为了增加神经网络模型的非线性。没有激活函数的每层都相当于矩阵相乘。就算你叠加了若干层之后，无非还是个矩阵相乘罢了。</a>以上这句话引用自百度百科，实际上意思就是说对于神经网络来说，一个神经元的输入实际上就是前面一层神经元值得线性组合，如果不做任何处理，则神经网络就是多个线性函数组合，也就是说就算添加了隐藏层，最后得输出也只是最原始得输入得线性组合（证明），因此中间的隐藏层存在的意义就很有有限，而引入激活函数后，通过激活函数做一个非线性映射，使得神经网络能够对任何函数进行逼近。在了解激活函数后我们需要进一步的了解梯度消失问题：<img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1.png" alt="梯度比较1"><br>上图中的黄色矩形柱的高度代表了梯度的变化的大小，从中我们可以看到layer2中的梯度变化明显大于layer1，下面需要通过数学的方法进行证明:<br>&nbsp;&nbsp;&nbsp;&nbsp;假设$\delta^l_j= \partial C /\partial b^l_j$表示第l层第j个神经元的梯度，假设$\delta^1$为第一层的梯度向量，$\delta^2$为第二层的梯度向量，通过向量长度能够近似的表示某一层的学习速率，则不同层的学习速率曲线如下图：<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/%E4%B8%8D%E5%90%8C%E5%B1%82%E5%AD%A6%E4%B9%A0%E9%80%9F%E7%8E%87.png" alt="梯度比较2"><br>从上图可以看到，越靠近输出层的隐藏层具有越高的学习速率，这个就是我们所说的梯度消失的问题，神经网络层数越多，梯度下降越明显，神经网络层数过多可能导致开始的神经网络梯度变化很小，收敛困难，同时梯度消失的问题又导致对于激活函数响应的问题，这就是我们提到的<a href="http://neuralnetworksanddeeplearning.com/chap5.html" target="_blank" rel="noopener">梯度消失问题</a>。<br>&nbsp;&nbsp;&nbsp;&nbsp;上面的说明都是从实验证明上体现了梯度消失的问题，下面我们对梯度消失的原因进行详细说明:<br><img src="https://blogimage-1251632003.cos.ap-guangzhou.myqcloud.com/%E6%A2%AF%E5%BA%A6%E6%B6%88%E5%A4%B1%E8%AF%B4%E6%98%8E.png" alt="梯度消失3"><br>上图中我们构造了一个最简单的神经网络，每一层只有一个神经元，一般来说权重$w$都小于1，实际上对于激活函数（假设激活函数为sigmoid函数），则sigmoid函数的梯度最大值为0.25，则$|w_j \sigma’(z_j)| &lt; 1/4$由此可得，梯度存在指树下降趋势，由此导致梯度消失。<br>&nbsp;&nbsp;&nbsp;&nbsp;在了解了梯度消失后我们就可以介绍一下<a href="https://blog.csdn.net/tyhj_sf/article/details/79932893" target="_blank" rel="noopener">各种激活函数了</a>实际上主要介绍三类，分别为sigmoid函数，tanh函数以及ReLU函数。对于不同的激活函数我们主要看几点：</p><ul><li>1.激活函数是否对整个实数空间适用（映射整个实数空间）；</li><li>2.激活函数的导数情况；</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;其中第一点是对激活函数的要求，第二点是判断激活函数好坏的特征，这三类激活函数的函数特征在<a href="https://blog.csdn.net/tyhj_sf/article/details/79932893" target="_blank" rel="noopener">网上很多资料</a>上都有,我们就这几种函数来说明他们之间的优劣和各自的特点。首先是sigmoid函数，sigmoid函数在深度学习早期是使用很广泛的函数，在我们刚刚学习深度学习的时候一般是以此函数作为模板的，这个函数满足我们第一点的情况，对于$[-\infty,+\infty]$区间都能够映射到$[-1,1]$之间，且求导简单。但是如我们以上分析的sigmoid函数存在几个问题，第一个：梯度消失的问题，在值极小的情况下sigmoid函数梯度趋近于0，由此导致在多层神经网络中收敛缓慢。特别是在深度神经网络中，梯度消失现象更加明显。第二：sigmoid输出的数学期望不为0，由此导致每一层神经元在传递过程中得到上一层的非0均值的信号叠加的输入。针对第二个问题，有学者引入了tanh函数，tanh函数与sigmoid函数十分相似，只是均值为0。针对第一个问题，有学者引入了ReLU函数，ReLU函数简单，计算极快，但是ReLU的问题在于非0均值以及对于小于0的输入，梯度都为0，神经元不激活。针对ReLU的问题，有很多学者对ReLU函数进行了改进，得到了一系列ReLU函数的变体，在这篇文章中就不进行详细的讨论，在后续文章中会陆续更新关于tensorflow2.0以及一些其他典型网络的相关实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;很久没有更新这个系列了，不知不觉tensorflow也更新到了2.x版，新版得tenforflow相比于1.x的版本，有着更快的训练速度，同时内部集成了keras使得网络的构建和训练变成了一件及其简单的事情，因此在构建网络上并
      
    
    </summary>
    
      <category term="学习" scheme="http://www.wuweiblog.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="tensorflow学习" scheme="http://www.wuweiblog.com/tags/tensorflow%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>活得怎么样</title>
    <link href="http://www.wuweiblog.com/2020/02/18/%E6%B4%BB%E5%BE%97%E6%80%8E%E4%B9%88%E6%A0%B7/"/>
    <id>http://www.wuweiblog.com/2020/02/18/活得怎么样/</id>
    <published>2020-02-18T07:50:55.000Z</published>
    <updated>2020-10-30T03:44:44.607Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;本来昨天应该写的，但是昨天晚上跟老婆吵架所有的事情都没有心思去做，昨晚也差不多一宿没有睡好，到现在人还是有点不清醒，到现在才能整理思路说一下昨天看的这部电影《遗愿清单》，这部在豆瓣上评分很高的电影也确实值得我们去看，去体会，去思考。<br>&nbsp;&nbsp;&nbsp;&nbsp;剧情很简单，两个身患绝症的老人，在生命的最后关头决定疯狂一把，在生命的最后一个月中去做那些自己想做却又没有能够做得了得事情。看起来感觉就像是《假如再给我三天光明》得升级版，实际上电影得表现力可能要强的多。我们从出生开始实际上就面临着一个问题，那就是我们如何面临死亡以及如何度过我们这一生的问题。我们一直以来有很多角色，学生、子女、丈夫/妻子、员工、老板….每一个角色都有一套评价标准，我们需要当一个好学生，做一个孝顺的子女，做一个好丈夫/妻子，在公司做一个好职员为公司创造价值，做一个好老板好好经营自己的企业。我们在这么多的角色中辗转，然后忘记了一个最重要的角色，那就是我们自己。实际上我们首先是我们自己，然后才是我们需要扮演的角色，而很多人在扮演这些角色的过程中把自己给丢掉了。<br>&nbsp;&nbsp;&nbsp;&nbsp;如果我们的生命只剩下最后三个月我们会去做些什么？也许这个问题只有当我们垂垂老矣的时候才能回答得上来吧，在这个世界上我们很难一辈子只为自己活，只有当我们扮演好了我们生活中的每一个角色之后我们才能够真正的做自己吧，有时候觉得人这一生真的很讽刺，如果把这个世界比作一个大舞台，实际上每个人都只是一个演员，一个永不休止的演员，也许只有在夜深人静的时候我们坐在床上才能真正思考到底我自己是谁这个问题吧！不知道是什么原因，在这两年以来我一直都并不害怕死亡，有时候甚至希望死亡能够快点到来，但是我又不想经历死亡的痛苦，我多么想一觉睡过去，然后第二天不再醒来。<br>&nbsp;&nbsp;&nbsp;&nbsp;有人说过众生皆苦，也有人问生活一直如此艰辛还是只有偶尔如此，有人失去一切仍然坚持活着，有人充满希望的躺在了铁轨上。有一个很重要的问题是我们的生活到底有什么意义，或者说是因为我们的角色给我们带来了生活的意义，或者说活着本来就是意义。所以实际上这就是宗教让我们觉得矛盾的地方，如果死后能进天堂，如果死后能够进去极乐世界那为什么还要我们忍受活着的痛苦呢？为什么所有宗教都不提倡自杀呢？是怕天堂的人太多了么？或者说实际上我们身上本来就有很强的动物性，所以我们只是本能的有着对死亡的恐惧，以及将基因传承下去的本能，或者说生存的意义就是对死亡的恐惧？实际上死亡如何也没有人知道，所以我们的恐惧只是对未知的恐惧？所以随着年龄的增加我们越来越恐惧未知，所以我们也越来越恐惧死亡？<br>&nbsp;&nbsp;&nbsp;&nbsp;絮絮叨叨说了这么多，回到电影本身上来，其实剧情很简单，但是每一个对生活的的疑问都值得我们深思。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;本来昨天应该写的，但是昨天晚上跟老婆吵架所有的事情都没有心思去做，昨晚也差不多一宿没有睡好，到现在人还是有点不清醒，到现在才能整理思路说一下昨天看的这部电影《遗愿清单》，这部在豆瓣上评分很高的电影也确实值得我们去看，去体会，去
      
    
    </summary>
    
      <category term="影评" scheme="http://www.wuweiblog.com/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="遗愿清单，影评" scheme="http://www.wuweiblog.com/tags/%E9%81%97%E6%84%BF%E6%B8%85%E5%8D%95%EF%BC%8C%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>浮生偷闲</title>
    <link href="http://www.wuweiblog.com/2020/02/03/%E6%B5%AE%E7%94%9F%E5%81%B7%E9%97%B2/"/>
    <id>http://www.wuweiblog.com/2020/02/03/浮生偷闲/</id>
    <published>2020-02-03T03:49:41.000Z</published>
    <updated>2020-10-30T03:44:44.613Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;emm因为疫情的原因导致这个年一直都在家度过了，为了打发闲暇的时间所以宅在家的时候就一直在看电影，把以前看不下去的电影、以前没有看的电影、以前很喜欢的电影统统都准备翻出来看，最近好像是事情也比较多，所以看些电影也算放松一下吧，昨天主要看了《这个杀手不太冷》以及《指环王》系列的电影。在这里我不太想介绍剧情，毕竟是老片子，而且对于《指环王》系列的电影我也只是看了电影而已，所以也没法分析剧情，只是谈谈自己的体会罢了。<br>&nbsp;&nbsp;&nbsp;&nbsp;相比之下我更喜欢《这个杀手不太冷》而不是大家都喜欢的《指环王》系列，大家都说艺术家创造出艺术作品后这个作品就属于大家了，一千个读者有一千个哈姆雷特，从这部电影中我看到了救赎～，里昂作为一个杀手，他是专业的，他具有极高的专业素养，他冷静，镇定，身体强健；他无任何不良嗜好，甚至除了把杀手当作工作以外没有任何兴趣爱好，唯一陪伴他的只有一株绿植。作为一个杀手，他完美得无可挑剔，可是作为一个人，他是不完整的，然而上天把玛蒂尔带到了他的身边，玛蒂尔从小生活环境十分糟糕，是一个敏感、早熟、缺爱的人。这天玛蒂尔的父亲因为私藏了别人的毒品全家惨遭杀害，在危机关头里昂救下了她，于是她和里昂还有里昂的那株绿植生活在了一起，在一起生活的过程中，里昂的内心逐渐被融化，他变得快乐起来。玛蒂尔仿佛是他生活中的色彩，而与里昂的相处过程中玛蒂尔感受到了爱与关怀。<br>&nbsp;&nbsp;&nbsp;&nbsp;与玛蒂尔的相处过程中里昂完成了自我救赎，作为一个完整的人的自我救赎，在最后关头里昂看到了这个世界的光明，而实际上作为一个杀手，里昂一直生活在了黑暗之中，若非玛蒂尔，里昂对也不会有过多的对生命的向往，然而后来里昂还是死了。与我们喜欢的童话故事不同的是男女主角并没有幸福的生活在一起，然而，正是里昂的死亡才完成了他自我救赎的最后一步，作为一个杀手，他双手已经沾满了鲜血与仇恨，而作为一个正常人，他必须要用生命完成自我救赎，因此在充满希望中死去可以说是里昂最完美的归宿。而离开的玛蒂尔则重返学校开始学习，在这一段相处的过程中玛蒂尔感受到了爱，感受到了关怀，在与里昂的相处过程中她心中缺失的爱被填满，从而成长为了一个完整的人。<br>&nbsp;&nbsp;&nbsp;&nbsp;本来看电影就是图一个开心，所以我更喜欢那些搞笑的喜剧片，但是不得不说，这部电影不管是从拍摄手法，电影节奏以及整个场景来说都是极好的。就我个人来说我从里昂身上似乎看到了自己的影子，从家乡来到大城市打拼，一直努力的工作，似乎也没有什么兴趣爱好，所有精力都投入到了工作当中。总感觉我们的人生似乎缺了点什么，可能是爱，可能是认可，又可能是别的什么。不管怎么样，我们总是在完成自我的救赎，所以里昂他的痛苦，他的思考我甚至都感同身受，也许一千个读者有一千个哈姆雷特，不管怎么样，这部电影是让我感动的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;emm因为疫情的原因导致这个年一直都在家度过了，为了打发闲暇的时间所以宅在家的时候就一直在看电影，把以前看不下去的电影、以前没有看的电影、以前很喜欢的电影统统都准备翻出来看，最近好像是事情也比较多，所以看些电影也算放松一下吧，
      
    
    </summary>
    
      <category term="影评" scheme="http://www.wuweiblog.com/categories/%E5%BD%B1%E8%AF%84/"/>
    
    
      <category term="指环王，这个杀手不太冷" scheme="http://www.wuweiblog.com/tags/%E6%8C%87%E7%8E%AF%E7%8E%8B%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%9D%80%E6%89%8B%E4%B8%8D%E5%A4%AA%E5%86%B7/"/>
    
  </entry>
  
</feed>
